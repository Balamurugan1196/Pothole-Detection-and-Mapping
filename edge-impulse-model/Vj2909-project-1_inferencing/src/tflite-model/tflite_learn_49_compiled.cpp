/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.02.2025 12:55:29

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242640;
#else
constexpr int kTensorArenaSize = 241616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 18420, -23992, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00022224072017706931, 0.00016853761917445809, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 48,-36,-44,90,-63,-3,-32,66,127,-20,-19,-42,-28,52,-46,37,87,-100,-37,-80,83,69,59,-49,-58,-96,-11,61,18,-38,-16,52, 
  /* [1][0][][] */ 59,84,83,-71,-82,86,-9,14,-48,-21,40,120,127,50,51,0,-46,5,-69,-100,-86,38,37,120,88,87,-53,-5,113,-120,-113,-19, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0042081135325133801, 0.0031912487465888262, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -93, 174, 160, -211, -436, 224, -446, 277, 28, -315, 87, 105, 172, 204, 42, -258, -135, -305, -228, -374, -249, 194, 5, 73, -184, -44, -278, -323, 24, -124, -226, -316, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1008617699844763e-05, 4.3976182496408001e-05, 4.1960836824728176e-05, 4.0823608287610114e-05, 4.27994855272118e-05, 4.0753671783022583e-05, 4.2872601625276729e-05, 4.5785844122292474e-05, 4.374836862552911e-05, 4.5333086745813489e-05, 4.6363566070795059e-05, 4.2990657675545663e-05, 4.437630923348479e-05, 4.2923056753352284e-05, 4.5553068048320711e-05, 4.1843177314149216e-05, 4.0712660847930238e-05, 7.583190017612651e-05, 6.5807435021270066e-05, 4.120168523513712e-05, 4.7541707317577675e-05, 4.1430015699006617e-05, 4.0938484744401649e-05, 4.5438613597070798e-05, 4.2139658035011962e-05, 4.4952805183129385e-05, 4.2303337977500632e-05, 3.9917918911669403e-05, 4.5595945266541094e-05, 3.9927948819240555e-05, 4.8156089178519323e-05, 4.311012162361294e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -45,-56,107,8,98,-12,-95,-113,61,-111,-118,-4,61,6,-42,51,-61,-36,-62,-68,-76,-113,0,112,-121,9,79,-52,113,13,-26,-86,87,-68,-101,66,-118,-88,-107,24,75,-94,-106,102,52,-116,109,-25,17,-51,-39,101,-80,-54,-100,109,22,55,102,-120,-82,81,-60,41,-7,15,70,90,49,97,81,-127,97,-113,36,86,-101,10,-66,25,55,12,99,-7,-64,-49,-95,110,29,120,-6,-122,10,72,33,16, 
  /* [1][0][][] */ -51,34,-72,3,-24,82,41,16,85,-92,-97,111,77,-15,28,69,110,-36,48,127,-38,-3,39,31,37,22,-32,102,13,10,105,-53,61,111,-11,32,52,66,-7,-58,-55,12,-17,-91,-32,44,-23,-51,-21,-71,97,70,12,93,-71,-41,29,98,35,85,-52,112,-57,-80,-38,43,76,44,107,35,22,18,-114,99,-52,48,94,-43,-36,62,-72,87,-40,-101,34,119,-63,-54,86,86,92,30,93,100,36,1, 
  /* [2][0][][] */ 52,40,-66,101,-6,-60,94,105,-97,96,-32,125,105,-5,87,-109,-56,-23,48,68,-92,-14,117,25,-22,85,115,6,-68,86,89,108,-69,-11,-98,-106,-88,102,116,-23,-115,-73,19,-3,-84,127,-21,-77,104,53,76,-78,-47,76,28,25,-70,98,-95,8,-15,59,-29,69,114,55,50,93,-93,76,13,-66,29,-67,27,30,-42,-24,9,0,45,-95,0,-29,7,-95,-16,-22,101,122,-26,12,-35,-74,-38,-63, 
  /* [3][0][][] */ 73,-3,39,-23,-72,53,-120,42,51,18,68,-2,95,98,75,4,107,100,-61,13,119,-94,-72,-123,-28,-123,-91,111,47,-107,87,5,-59,-39,-16,-19,-100,-29,49,60,-30,-101,-108,-2,75,27,-54,-89,71,-86,41,-5,102,28,94,-109,-124,-126,-122,-65,-106,33,-38,73,57,-38,-66,-7,-36,-79,4,102,24,-115,56,-54,33,101,101,-69,-98,-127,36,95,27,45,-49,-127,-90,45,3,-117,93,-103,-98,39, 
  /* [4][0][][] */ 44,95,-10,45,-34,-30,22,10,53,84,-17,42,27,-46,-20,-76,-34,-13,-69,7,100,-100,77,18,-28,-14,54,-69,-58,28,-75,-60,56,107,9,-108,-59,-14,-118,38,-57,-71,-79,-98,27,99,28,49,12,-48,-25,-84,-95,39,-92,13,30,-101,24,4,2,-80,-47,-75,-52,47,-7,-47,19,-106,-105,-94,-61,12,95,44,52,-31,-17,-65,-3,-51,-105,-29,-8,60,81,-7,-127,-81,37,39,20,90,-104,-22, 
  /* [5][0][][] */ 105,-93,80,91,59,-117,33,66,116,-110,3,-62,36,114,41,44,69,69,-63,113,40,57,23,-23,-103,-64,-8,-98,55,36,25,-94,-37,11,-76,23,-118,-33,56,28,-88,-49,48,106,-34,32,41,-51,-110,127,7,45,42,26,43,-18,115,53,-89,-37,35,-68,46,-78,-14,114,-26,33,81,8,114,-66,-53,88,-33,-73,23,-48,17,76,119,47,39,126,-79,90,-1,50,80,-98,125,98,-10,39,85,-81, 
  /* [6][0][][] */ 12,-51,105,65,-92,-67,-10,57,-23,-87,-1,-94,80,48,108,-127,35,-5,-7,97,-85,-126,102,52,-68,-89,-15,-64,-34,-120,40,-82,-98,-126,-54,-111,-16,33,-120,73,80,49,16,-23,-119,98,-94,-53,-92,11,-33,-72,51,-60,88,-32,3,-14,-77,106,-103,-3,62,-75,-59,59,93,-57,73,-12,-114,-12,45,-73,-95,-49,-88,-108,-64,-36,27,-39,37,-34,-78,-92,-47,-102,77,87,87,13,-58,-72,69,-34, 
  /* [7][0][][] */ 100,65,-29,-38,-70,113,-11,4,113,9,-84,17,54,-76,49,76,56,22,11,105,54,40,1,88,-53,97,45,55,-67,109,-15,34,31,28,67,94,-92,87,-4,-19,95,-67,83,72,53,3,100,-98,57,-39,-127,-57,-19,79,27,26,113,-87,-2,-49,1,-5,82,-106,-57,-45,71,25,-104,18,67,82,89,15,57,63,-46,58,-86,35,91,-28,-19,-65,88,37,-100,94,79,14,86,54,-55,-29,-1,-61, 
  /* [8][0][][] */ 0,33,-33,-96,38,26,-74,-28,0,28,42,77,-27,-53,-82,-74,-67,91,-79,7,19,-21,81,108,-108,94,37,80,-74,9,-96,104,90,-40,55,-7,118,0,-29,68,77,96,-112,-114,-7,-34,-28,107,20,-126,-58,-14,-66,-23,-31,-116,47,99,-65,102,105,42,37,109,-46,-52,-17,97,-95,41,25,-13,83,63,18,26,-56,108,80,85,29,81,-127,-99,22,39,69,-53,24,-41,-83,91,-93,-111,-56,55, 
  /* [9][0][][] */ -2,10,106,40,105,-115,-56,-118,41,58,-16,59,-13,-71,-104,-21,-4,-4,-104,-50,-9,89,-109,-114,116,-4,-18,24,0,-43,-85,90,56,-2,19,-14,-76,11,-21,-45,41,-63,47,-89,78,23,-104,50,50,11,-44,-52,63,-70,-71,95,72,-45,32,-8,-66,107,82,-71,-75,-2,93,44,7,88,85,-64,8,77,-107,-95,-93,-121,-44,116,28,54,88,29,-46,-98,37,-19,87,22,-35,106,127,-5,50,-45, 
  /* [10][0][][] */ -54,77,81,-60,-4,98,102,33,38,37,24,-56,106,85,-31,14,-30,77,-80,-49,-11,27,55,-62,29,52,-101,-109,-42,79,-80,-67,80,100,105,72,-38,9,-24,35,-30,111,-100,-33,-92,-48,0,-55,-1,19,19,22,58,29,-56,-28,-94,-14,0,-39,-2,73,109,36,127,-64,-91,-19,25,-13,-84,-56,75,64,-83,100,-2,60,64,8,77,1,62,108,-89,67,96,-14,41,12,-4,-61,-39,-35,-34,-57, 
  /* [11][0][][] */ 109,14,-11,106,127,62,55,35,112,103,-79,120,8,-83,28,-64,-51,-103,87,20,36,76,28,-105,-108,-110,-14,79,88,-3,28,-11,-84,-67,49,52,-56,70,-26,-65,-31,105,-80,9,-44,-60,-103,-89,82,125,84,55,-77,-91,24,18,-53,-63,-45,-86,-89,92,82,6,30,93,-55,21,62,55,-72,-75,39,101,-102,56,-46,38,-42,78,-100,-31,-66,-37,49,-81,11,-18,-88,-5,20,-110,-96,-39,-73,-41, 
  /* [12][0][][] */ 16,68,-55,6,98,11,-29,42,-68,66,-9,21,-30,23,50,-70,-92,-27,-33,-68,33,-7,20,99,-60,-45,106,-98,93,18,-27,123,-81,-58,-48,19,-1,-66,-9,47,117,44,-102,-35,-18,-73,-32,117,-40,-98,-90,114,37,12,-73,89,-17,-55,28,70,59,109,3,51,127,41,-42,118,59,105,45,77,78,118,-19,-3,-21,37,-108,-103,-48,103,55,27,-28,36,57,122,-82,-98,90,46,108,-4,37,79, 
  /* [13][0][][] */ 110,-58,104,101,105,116,86,71,78,-96,17,-24,100,82,71,-41,-113,-65,-61,36,74,-24,123,-42,-56,42,14,17,-86,-88,90,46,45,112,-21,40,-81,-24,32,75,-58,83,-48,17,-40,35,3,-26,39,106,-55,-95,-99,36,108,-77,-45,28,-51,-69,-27,113,-69,13,-36,-55,-89,91,-35,-8,102,4,-91,41,-81,-38,-92,72,87,-69,59,-92,102,31,-76,-96,97,127,-4,-45,-78,56,120,-42,74,0, 
  /* [14][0][][] */ -63,-88,86,83,85,-13,-10,-127,-53,-4,57,112,-11,-79,-89,-63,-42,-41,40,21,-31,34,2,62,-90,-71,-10,43,-84,-89,-77,33,104,-21,-31,12,102,104,18,-112,-12,-100,30,81,63,-113,56,-80,115,85,51,60,116,-13,-13,13,-30,15,43,98,-20,-54,-47,66,-92,2,78,-106,-93,-79,-63,74,18,80,39,-63,67,-97,58,32,59,-20,-104,-38,-103,-100,-106,116,111,15,100,-73,61,99,6,66, 
  /* [15][0][][] */ 11,-35,-33,78,85,-98,60,-104,62,-6,-75,10,108,-1,-95,-115,87,8,-99,15,43,17,71,108,81,69,37,90,20,61,64,-107,-3,4,-68,-12,-73,112,115,-74,13,112,-50,-30,24,-83,-46,-85,-13,-79,1,27,-104,-108,-58,-12,63,48,-52,109,-51,-73,-7,104,-46,97,-76,-5,-62,7,55,-79,14,-18,53,-114,-6,53,105,77,-88,59,-119,-68,-127,-43,-96,36,82,68,-125,-41,52,108,-113,114, 
  /* [16][0][][] */ -81,-1,115,-69,27,117,-59,34,47,42,-116,68,-30,-62,-57,-67,112,81,64,54,109,84,-42,53,-35,55,-80,73,-107,11,34,-1,-108,72,66,57,-35,52,-59,-75,19,-53,71,94,66,101,102,-14,-59,-127,19,103,-42,108,67,39,28,92,107,11,117,118,29,69,37,7,-37,96,41,95,-36,-18,41,84,73,93,-23,104,-117,-2,8,-87,49,-3,7,102,104,-1,72,9,-10,109,60,-43,-98,20, 
  /* [17][0][][] */ 74,-16,-21,63,21,-28,-45,7,39,2,44,59,100,65,-66,23,21,15,80,127,-17,-27,8,-27,-25,54,-19,25,68,-34,23,108,-36,28,-11,81,-51,59,-5,-13,-58,-12,18,-30,-25,28,61,-84,26,69,17,56,4,107,25,11,-67,72,-108,-53,58,-42,59,66,21,-17,-1,-40,-24,46,76,50,-45,8,-33,18,82,-45,18,-66,33,-31,13,-3,-44,55,59,12,57,29,-37,-8,49,76,48,44, 
  /* [18][0][][] */ -63,59,63,-45,14,-55,-70,-1,-8,41,-70,-37,-30,19,35,-44,8,-20,45,76,63,-36,9,-56,18,-44,-14,64,15,71,-3,27,23,-20,-37,-75,-28,23,-25,43,-28,-4,-34,-11,-79,8,18,-10,5,-5,67,22,-76,-6,-4,58,-30,24,69,-81,55,63,7,21,-44,-81,-26,66,101,-47,-55,69,-61,-21,-62,-74,36,30,-6,-53,-44,-4,-18,-45,61,-25,44,45,-73,-51,-51,94,60,-23,127,30, 
  /* [19][0][][] */ 14,27,75,35,62,-91,95,89,93,-69,25,-15,-101,30,-62,58,71,-112,111,55,-27,78,-62,9,78,-88,26,-72,-98,-127,-72,44,80,-90,27,-4,5,-76,-63,-108,41,-124,-90,6,-93,26,74,-101,-32,35,-45,42,-37,10,3,-14,21,98,29,-33,53,-59,99,62,-77,-7,-32,-5,-14,52,74,-56,-68,-127,-60,-86,-28,-121,11,108,56,-122,-35,76,-94,-12,4,-8,88,26,-7,63,-39,112,68,-53, 
  /* [20][0][][] */ -15,61,62,78,-72,86,13,48,8,5,-82,-7,-13,71,33,-70,-48,-37,-69,-33,15,-43,-71,-67,67,-71,-100,42,14,5,-42,95,90,34,-16,47,36,-33,-21,-101,-79,-36,-84,-94,-27,-64,-67,92,53,-127,-98,28,39,93,43,-5,83,62,98,77,94,-52,-64,-35,-38,-65,-48,9,-80,-73,-63,64,-58,-82,32,15,91,68,94,100,72,-2,69,-30,49,100,-18,59,12,81,22,54,13,15,-11,1, 
  /* [21][0][][] */ 97,75,74,-102,105,-86,80,26,-2,-61,-70,48,12,48,-50,-89,-105,-31,39,-16,114,-49,77,-81,64,-88,-28,73,19,14,-2,-17,4,28,-90,-119,117,104,-108,-30,-4,10,31,-10,-104,-79,-80,99,-24,-52,-25,103,38,76,-88,25,-53,50,-75,127,54,-80,20,-18,97,39,-35,-71,-114,-1,65,82,37,-23,67,72,-101,-28,69,92,17,110,39,-65,30,-96,69,-79,-105,88,114,-116,-43,-60,78,-30, 
  /* [22][0][][] */ 36,-58,-83,-109,87,-49,116,65,-102,97,-78,-112,109,-117,-118,-94,42,89,-116,-49,96,-78,32,35,90,-4,-119,97,-57,-78,-68,-111,53,65,16,13,1,-13,-57,-121,5,-14,1,101,62,-122,100,-20,-64,-84,-1,-13,-70,-96,-42,42,-8,-38,-26,-35,114,-81,-73,-127,-65,22,-121,-48,124,108,-32,-2,-80,11,71,-100,54,-56,69,95,115,-113,-77,-123,85,92,99,-32,-55,38,-66,65,23,27,-27,102, 
  /* [23][0][][] */ 61,-88,-2,57,103,-106,6,-95,55,-70,83,78,30,-92,18,-36,83,-30,-89,107,93,-78,98,-31,-14,-11,85,13,66,45,71,-25,-35,47,17,29,89,-3,-107,8,-96,2,11,-105,-67,-81,111,24,72,-91,-127,-38,74,-49,-44,91,-83,-21,79,43,-109,-90,-42,-15,57,41,-112,-101,60,-10,108,-63,-12,-25,-47,-92,54,-22,90,97,-47,-48,30,-88,91,10,108,-11,-80,45,100,-10,108,-40,-24,84, 
  /* [24][0][][] */ -86,-55,-112,-79,-98,-110,-76,-90,58,113,82,33,107,61,-44,-127,-88,35,21,-58,95,-88,-61,-41,46,-35,68,51,100,45,1,-61,-20,9,46,26,-60,-89,71,-26,-78,-107,101,5,16,-40,42,69,-99,-72,-26,18,68,59,69,-78,-1,73,18,-4,92,-18,40,89,-98,95,-53,-100,-110,49,-62,-31,-44,35,97,99,64,-81,-112,-97,-87,-101,-64,-118,-2,63,-20,-107,25,-113,-2,-80,-20,31,-95,27, 
  /* [25][0][][] */ -89,-53,-75,-16,92,-60,-98,48,42,-95,-43,37,83,-1,-107,-23,-67,58,48,-127,70,77,-13,-52,9,-64,-90,43,84,-75,33,122,77,-105,39,74,96,-65,-19,-22,-86,91,-96,2,87,41,50,31,-106,122,-73,9,51,-22,-47,15,-16,39,-118,69,113,46,42,24,-5,82,-21,-13,-103,6,-22,-113,27,-116,56,22,86,67,16,0,56,44,-37,84,-71,-54,-104,-72,-16,-32,116,23,-108,-3,-8,-70, 
  /* [26][0][][] */ 51,-119,-19,-19,-111,-8,-15,-19,-112,-127,104,87,-86,-57,8,-19,111,26,-86,-77,7,70,97,10,54,61,7,52,8,0,-101,-5,-34,-71,-99,-105,-67,81,-55,106,-105,100,53,30,-74,69,-47,101,-25,14,10,92,14,-59,-7,-114,98,64,76,21,1,-97,58,-18,98,-26,-59,53,-100,74,86,91,83,-101,-89,7,37,-112,-102,20,-34,75,75,-85,76,-4,-51,7,-91,110,11,19,-66,103,45,83, 
  /* [27][0][][] */ 8,4,-72,-112,-126,-79,-80,-23,41,102,35,-120,-18,56,82,-36,64,-22,76,-94,-105,7,-36,-31,-116,44,-120,-8,64,26,-39,-14,61,69,-99,-98,-101,-74,-124,90,-106,14,25,13,101,22,68,105,92,67,63,-85,-98,-96,-12,-42,106,-29,-121,-89,-65,-70,-42,54,39,-55,-125,109,46,6,-127,5,66,-61,-15,-99,46,-76,89,106,85,-30,119,-64,-85,-94,-40,28,-57,-9,-38,-57,55,12,88,55, 
  /* [28][0][][] */ 75,-11,85,43,-127,-72,-93,-75,-43,-114,55,35,-77,-83,4,87,86,100,-71,52,-30,22,-101,-69,-124,77,-83,-54,-76,-75,-2,-25,-102,17,75,59,16,-104,-48,26,93,40,-93,48,-106,-14,10,40,20,-93,-79,-33,-92,21,43,28,45,-18,70,47,-15,-55,-92,2,52,63,-19,74,-88,17,-106,-42,62,17,-9,-92,-107,-58,-83,42,-77,-94,98,-31,55,-107,58,-86,-99,-69,-45,-76,-44,43,-98,-71, 
  /* [29][0][][] */ 48,59,65,-65,-101,15,-127,3,98,-18,-97,-107,99,-117,-52,-52,-105,107,17,-70,-84,-35,60,6,-36,11,-51,-25,-113,-17,106,-10,54,-4,-77,-60,-8,107,-16,99,49,112,-50,90,-3,109,-61,-28,18,-32,68,-107,74,-115,119,47,-100,60,-30,117,-124,107,-102,-50,-72,-73,58,94,94,-94,39,-81,127,76,74,29,116,-64,-34,41,-10,-86,-13,-91,65,124,47,77,-45,100,74,81,-117,12,-8,63, 
  /* [30][0][][] */ 26,-56,-50,38,-80,49,-61,4,99,-15,-2,-5,-103,21,48,41,-14,22,81,-96,36,-93,-106,9,-93,19,-65,127,8,-82,-83,0,-9,-72,-78,-35,37,-20,16,27,73,-70,-14,94,90,-37,87,50,-70,76,47,-94,87,-55,-11,88,-65,-33,-46,-30,-84,11,-65,51,-103,-82,-88,98,-4,96,35,-17,-59,89,27,-68,-36,-70,-70,-44,17,85,-78,-15,-101,27,-62,92,-39,-107,69,43,-27,-6,1,-66, 
  /* [31][0][][] */ 76,-95,34,96,51,57,-64,-103,-34,-22,-83,-92,105,-126,-51,107,-65,-93,42,46,60,32,-34,102,43,-119,31,40,-76,-78,43,106,16,17,-102,-9,94,-35,-69,-115,56,-72,-35,29,2,-57,-44,21,68,28,91,-35,-112,-61,-83,21,-120,67,3,110,-42,-2,82,-76,69,108,-49,-82,66,-127,-120,8,-102,-45,4,3,-61,-50,46,88,-79,-45,53,69,52,92,-98,14,13,-56,-83,-57,6,98,-8,-26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017428662395104766, 0.0018689876887947321, 0.0017833355814218521, 0.0017350033158436418, 0.0018189781112596393, 0.0017320309998467565, 0.0018220854690298438, 0.0019458982860669494, 0.0018593056593090296, 0.0019266561139374971, 0.00197045155800879, 0.0018271029694005847, 0.0018859931733459234, 0.0018242298392578959, 0.0019360054284334183, 0.001778335077688098, 0.0017302880296483636, 0.0032228557392954826, 0.0027968159411102533, 0.0017510716570541263, 0.0020205224864184856, 0.0017607755726203322, 0.0017398855416104198, 0.0019311410142108798, 0.0017909354064613581, 0.0019104941748082638, 0.0017978918040171266, 0.0016965115210041404, 0.0019378275610506535, 0.0016969378339126706, 0.0020466337446123362, 0.0018321801908314228, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2466, 3077, 8157, 1727, -3151, -4307, 15106, 1878, 2513, -1130, 8882, -238, -8685, 2071, 16913, 6275, 11768, 4786, -4871, -5615, 4903, 15418, 20838, 16222, 1000, 945, 3615, 2949, 1808, -4317, 6461, -2344, -372, 3499, 49, 878, 10736, 4737, -1386, 4155, 8090, 5975, 4911, 13622, 4231, 3500, 2056, 7209, 4722, -3819, -5197, 484, -417, -899, 2144, 11, 299, -926, -4875, 11811, -1018, 1239, -1292, -1639, -3001, 6546, 13850, 1509, -3651, 847, 1481, 2369, 2126, -1087, 572, 11221, -522, 20756, 11680, -750, 10270, 2039, -401, 1430, 17036, 7611, 4360, 1320, 6115, 3987, -400, -7199, 861, -2564, -1548, -1955, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00024480913998559117, 0.00050930451834574342, 0.00029247705242596567, 0.00051303597865626216, 0.00033404005807824433, 0.00033847769373096526, 0.00022035822621546686, 0.00038414433947764337, 0.00023527283337898552, 0.00059001566842198372, 0.00022149737924337387, 0.00030055368551984429, 0.00028963197837583721, 0.0013683943543583155, 0.00018317911599297076, 0.00018488339264877141, 0.00015562678163405508, 0.00030103616882115602, 0.00039822061080485582, 0.00029845628887414932, 0.00012185842206235975, 0.00017608590133022517, 0.00014755122538190335, 0.00010430920519866049, 0.00018162313790526241, 0.00051208445802330971, 0.00082545483019202948, 0.00036565877962857485, 0.0002910552138928324, 0.00045285493251867592, 0.00022879551397636533, 0.00032924575498327613, 0.00017910098540596664, 0.00033112414530478418, 0.00035051885060966015, 0.00029066848219372332, 0.00017682777252048254, 0.00022515571617987007, 0.00043302818085066974, 0.00042804429540410638, 0.00015829660696908832, 0.00043468159856274724, 0.00030794058693572879, 0.00016993908502627164, 0.00045273019350133836, 0.00028580173966474831, 0.00025070406263694167, 0.00029894959880039096, 0.00028003682382404804, 0.00033134873956441879, 0.00029670135700143874, 0.00022853560221847147, 0.00038568186573684216, 0.00031532850698567927, 0.0003609124687500298, 0.00030263577355071902, 0.00032519162050448358, 0.00031461313483305275, 0.00031654132180847228, 0.00015596656885463744, 0.00076619331957772374, 0.00053472549188882113, 0.00024575591669417918, 0.00048260399489663541, 0.00060947984457015991, 0.00029401184292510152, 0.0001566564169479534, 0.00027024728478863835, 0.00031492003472521901, 0.00039455396472476423, 0.00027516670525074005, 0.00021621465566568077, 0.00063820596551522613, 0.00037265877472236753, 0.00031808580388315022, 0.00019171906751580536, 0.00028165747062303126, 9.0327295765746385e-05, 0.00015434516535606235, 0.0002757434849627316, 0.00014153425581753254, 0.00016557550407014787, 0.00019566083210520446, 0.00018480324069969356, 0.00010618041415000334, 0.00031290313927456737, 0.00053723197197541595, 0.00022186593560036272, 0.00011742565402528271, 0.00051163358148187399, 0.00028465953073464334, 0.00027838174719363451, 0.00026976215303875506, 0.00040970105328597128, 0.00039044793811626732, 0.00020911768660880625, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -38,127,21,-126,-69,-38,-25,-77,-27,35,-12,57,9,-61,-18,72, 
  /* [1][0][][] */ -28,27,-54,6,-20,2,21,-72,74,58,-53,20,0,5,43,-127, 
  /* [2][0][][] */ -6,14,-41,65,40,44,-48,-48,127,-49,19,34,-22,99,-68,-1, 
  /* [3][0][][] */ 46,-47,16,-89,-18,-45,0,-15,85,25,32,13,-6,30,39,127, 
  /* [4][0][][] */ -96,72,13,34,24,-33,-27,32,-12,29,32,-41,-127,-8,-32,28, 
  /* [5][0][][] */ -6,71,122,11,-1,95,-102,82,-39,68,-8,-15,47,-49,-127,28, 
  /* [6][0][][] */ 33,-43,116,-127,26,-15,-33,80,-86,-68,31,-55,11,79,-6,99, 
  /* [7][0][][] */ 19,127,-38,-58,81,2,2,-56,110,106,-12,-7,23,-29,71,49, 
  /* [8][0][][] */ 20,-86,2,-75,23,-51,30,-67,28,58,74,-11,16,127,69,57, 
  /* [9][0][][] */ 12,-29,6,127,38,4,31,-42,-42,100,12,-11,-11,-55,-9,-12, 
  /* [10][0][][] */ -17,17,-23,-127,-2,-18,-7,1,17,-20,10,-28,-22,-26,15,38, 
  /* [11][0][][] */ -2,19,28,-20,79,-31,75,-63,-90,51,-5,18,5,127,-76,-30, 
  /* [12][0][][] */ 61,-6,-46,21,8,-38,20,34,0,66,-108,-43,-50,127,-28,-15, 
  /* [13][0][][] */ -14,7,-16,4,-2,-127,-6,12,0,-3,-3,-6,14,-14,22,13, 
  /* [14][0][][] */ 27,-15,106,-44,56,-7,-127,-113,-34,-25,7,-4,17,-76,-10,-14, 
  /* [15][0][][] */ -74,0,-17,-60,-15,-40,127,33,-50,30,52,-21,-1,73,94,20, 
  /* [16][0][][] */ 1,46,127,64,7,16,78,55,-92,4,-69,9,-3,28,24,-79, 
  /* [17][0][][] */ -47,-118,-14,42,-77,-15,-69,22,-127,-42,24,-36,-7,49,66,-52, 
  /* [18][0][][] */ 13,59,16,73,34,0,19,-22,61,34,-33,-27,10,127,56,30, 
  /* [19][0][][] */ 26,-42,54,-5,76,17,-127,-55,-117,-76,-70,-123,-18,-53,5,-49, 
  /* [20][0][][] */ 127,-52,-73,-55,47,-94,19,62,-70,50,-124,-49,41,15,29,-7, 
  /* [21][0][][] */ 38,-39,51,3,4,12,-10,75,3,-62,61,42,-13,127,30,46, 
  /* [22][0][][] */ -21,54,-34,127,-67,-7,102,54,-24,51,-30,8,9,-4,20,18, 
  /* [23][0][][] */ 65,6,107,-92,76,-10,-19,37,-1,4,9,-45,2,-34,-127,29, 
  /* [24][0][][] */ -127,32,9,-14,1,122,30,-14,6,10,95,5,-97,25,65,-33, 
  /* [25][0][][] */ 16,15,17,25,21,30,57,-44,9,-127,-12,-7,-9,-24,3,8, 
  /* [26][0][][] */ -32,-2,-7,2,-48,-25,-30,-45,-127,-26,-6,-51,16,127,-24,67, 
  /* [27][0][][] */ -8,23,17,66,39,-20,-27,-21,61,0,-19,6,12,127,-10,9, 
  /* [28][0][][] */ 22,59,46,49,127,-28,41,21,-106,-7,-57,-49,25,87,48,-33, 
  /* [29][0][][] */ -2,-6,9,19,24,-2,6,47,-23,1,-34,-127,11,-11,-15,0, 
  /* [30][0][][] */ -13,81,-45,66,-43,-25,41,-127,-50,60,-28,-14,59,27,66,93, 
  /* [31][0][][] */ -59,-7,-16,-72,-3,17,-66,-115,44,77,1,-127,-36,-48,1,0, 
  /* [32][0][][] */ -127,-71,-1,68,52,52,-18,16,8,-48,-93,60,75,5,63,60, 
  /* [33][0][][] */ -3,-31,-39,-14,-89,-15,-73,3,50,31,0,-62,41,-127,117,41, 
  /* [34][0][][] */ 44,-15,80,33,49,30,-68,96,-83,-69,82,45,6,1,-21,127, 
  /* [35][0][][] */ -58,55,-52,13,-8,-19,24,-127,79,101,-99,-14,3,-10,71,-127, 
  /* [36][0][][] */ -42,38,10,127,36,48,102,40,-3,10,2,8,-22,31,-86,-98, 
  /* [37][0][][] */ -2,-13,-15,-66,10,8,-41,-34,-71,-29,16,2,7,-127,44,-42, 
  /* [38][0][][] */ 40,97,-10,-56,127,-14,41,-49,111,90,-13,-11,14,-36,73,22, 
  /* [39][0][][] */ -31,71,-8,-127,-16,16,-42,50,73,-91,-35,-27,7,89,32,32, 
  /* [40][0][][] */ -11,-34,1,-83,11,23,-9,-13,-127,-22,13,12,-19,-116,109,-101, 
  /* [41][0][][] */ -10,-15,-48,-2,0,-29,28,-3,-22,10,-35,-4,-127,15,2,25, 
  /* [42][0][][] */ 127,62,-50,-37,-62,-49,-18,-58,-1,7,99,-30,-74,53,103,-109, 
  /* [43][0][][] */ -34,110,-110,35,106,47,125,1,96,63,-37,46,20,-123,-127,-110, 
  /* [44][0][][] */ -26,-40,18,-48,66,9,-113,-127,-10,-30,23,30,-27,-28,67,-79, 
  /* [45][0][][] */ -7,38,-127,-24,31,-54,21,-56,19,12,16,-46,13,-11,43,-35, 
  /* [46][0][][] */ 9,11,-7,-86,-23,9,18,-38,-121,-18,-2,1,-9,-127,65,-22, 
  /* [47][0][][] */ 16,48,20,-13,127,-4,-31,19,-46,32,10,29,1,3,104,-32, 
  /* [48][0][][] */ -127,-76,-23,41,66,21,5,-13,5,-18,-107,42,63,7,68,44, 
  /* [49][0][][] */ 15,-7,57,77,118,-26,68,30,-110,-13,-28,-73,9,127,-2,-63, 
  /* [50][0][][] */ 32,-8,-69,6,4,-127,-18,4,-7,-7,-23,-51,29,-12,0,21, 
  /* [51][0][][] */ -9,27,31,8,22,-5,6,17,-97,67,20,-127,18,-97,-1,81, 
  /* [52][0][][] */ -13,75,-26,40,37,-19,35,28,71,104,-17,-71,44,127,79,27, 
  /* [53][0][][] */ -8,-41,-14,-8,-84,-8,-62,5,41,29,-1,-68,33,-127,116,28, 
  /* [54][0][][] */ 42,-1,-43,21,119,97,-127,-28,-59,-18,-20,-58,-3,-39,-36,-46, 
  /* [55][0][][] */ 69,-2,16,7,30,-49,-77,-127,-45,-65,-100,-5,-3,-29,20,-2, 
  /* [56][0][][] */ -19,15,30,-18,-8,-20,-106,74,-5,127,9,-6,30,9,-7,4, 
  /* [57][0][][] */ -16,33,-58,-3,-55,-33,127,101,-14,22,2,8,20,29,97,-23, 
  /* [58][0][][] */ 37,33,-127,47,97,116,-33,59,-107,-27,0,5,-39,21,-15,-28, 
  /* [59][0][][] */ -95,78,99,26,-72,-52,115,127,25,-1,40,-13,12,12,52,-7, 
  /* [60][0][][] */ -2,-7,-70,-4,28,-127,-34,-8,-6,-19,8,-7,31,-11,26,-9, 
  /* [61][0][][] */ 31,-9,25,127,94,17,26,0,-110,3,8,27,1,14,32,-56, 
  /* [62][0][][] */ -58,127,6,-40,-17,2,-62,41,-11,-58,-50,-38,-4,-86,-56,-40, 
  /* [63][0][][] */ -43,19,-31,127,-92,7,-70,-45,-61,-31,-22,-29,27,63,44,48, 
  /* [64][0][][] */ 30,-12,10,37,3,-2,-17,77,10,2,-41,-66,-2,-127,79,9, 
  /* [65][0][][] */ -15,-24,18,-104,29,-40,52,-32,-15,59,-8,-127,-4,-1,13,-35, 
  /* [66][0][][] */ 43,-32,59,-1,6,1,-1,103,20,-95,63,73,-10,127,21,64, 
  /* [67][0][][] */ -6,59,-17,-127,-9,10,-67,46,89,-105,-43,-10,17,84,68,30, 
  /* [68][0][][] */ -33,68,127,5,-5,0,-8,8,-51,-20,-39,-58,13,-44,101,-38, 
  /* [69][0][][] */ 127,107,-14,-18,-98,-43,-21,-48,-7,36,87,-75,-56,46,75,-88, 
  /* [70][0][][] */ 47,3,-67,-21,-39,15,71,127,-45,96,-46,-3,12,56,-27,33, 
  /* [71][0][][] */ 0,-6,-12,-3,16,-74,0,21,-35,12,-65,16,-127,1,51,53, 
  /* [72][0][][] */ 2,22,-127,27,10,43,13,107,-33,-42,25,3,31,19,-30,-17, 
  /* [73][0][][] */ -54,30,40,9,45,-34,-75,-127,22,-63,38,-28,23,-48,33,-13, 
  /* [74][0][][] */ -1,34,32,127,13,2,-71,80,-51,13,-34,58,20,-105,21,-85, 
  /* [75][0][][] */ 0,24,-50,29,23,25,10,-1,127,6,2,14,21,90,-43,-15, 
  /* [76][0][][] */ -2,-7,4,21,0,-10,-21,66,21,-36,-17,-127,-7,-4,2,10, 
  /* [77][0][][] */ -18,9,-1,124,-40,62,70,127,37,24,13,43,-3,-17,-11,-25, 
  /* [78][0][][] */ 2,24,60,-115,35,-28,-36,45,24,-54,11,-49,27,127,27,55, 
  /* [79][0][][] */ -23,-90,-60,-35,-63,10,21,-71,127,21,14,53,22,46,18,-61, 
  /* [80][0][][] */ -50,6,127,-61,29,7,14,-87,-58,31,-26,-90,6,118,95,-68, 
  /* [81][0][][] */ -56,52,-117,28,68,-127,-15,49,-4,-37,65,-13,31,0,13,6, 
  /* [82][0][][] */ 120,-22,-2,9,6,-109,-12,22,-28,-15,-127,-21,93,6,2,38, 
  /* [83][0][][] */ -31,81,-107,-82,-33,-33,38,-127,51,64,-58,-126,12,50,68,106, 
  /* [84][0][][] */ -44,31,76,-42,8,-20,72,-127,-44,31,6,-45,29,60,74,-15, 
  /* [85][0][][] */ -81,127,29,-110,-72,-20,-30,3,-44,-11,-65,32,3,-9,-109,-36, 
  /* [86][0][][] */ -5,24,-39,1,-38,-38,127,29,-2,-29,-11,-5,14,21,76,-6, 
  /* [87][0][][] */ -19,-23,8,-100,-1,-30,43,-7,-11,16,-14,-127,-15,0,7,-27, 
  /* [88][0][][] */ 71,-43,43,-23,14,-127,2,13,-73,31,-124,-63,38,21,108,22, 
  /* [89][0][][] */ 22,-28,-48,-52,32,-7,-33,-3,-39,-3,38,-55,127,-3,23,-49, 
  /* [90][0][][] */ 7,-58,35,-57,66,-12,-51,81,38,-64,-45,-32,0,107,9,-127, 
  /* [91][0][][] */ -38,-12,-18,-31,24,0,-43,-105,14,57,-10,-127,-42,-14,0,2, 
  /* [92][0][][] */ -22,29,44,10,-4,-127,15,-1,-3,-18,-6,-23,7,-32,17,15, 
  /* [93][0][][] */ 30,-16,127,-6,-44,57,23,-24,-14,26,-61,-12,-24,4,29,-2, 
  /* [94][0][][] */ 24,1,-8,-7,21,-9,-2,-6,-33,-12,14,-74,127,-22,31,-23, 
  /* [95][0][][] */ 127,91,0,50,-93,-5,-84,2,-13,-30,104,-31,-49,33,71,-82, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00064530858071520925, 0.0013425094075500965, 0.00077095959568396211, 0.0013523453380912542, 0.0008805182296782732, 0.00089221569942310452, 0.00058085680939257145, 0.0010125914122909307, 0.00062017119489610195, 0.0015552613185718656, 0.00058385956799611449, 0.00079224928049370646, 0.00076346006244421005, 0.0036070409696549177, 0.00048285390948876739, 0.00048734634765423834, 0.00041022690129466355, 0.00079352111788466573, 0.0010496960021555424, 0.00078672065865248442, 0.00032121466938406229, 0.00046415644465014338, 0.00038894001045264304, 0.00027495552785694599, 0.00047875242307782173, 0.0013498372863978148, 0.0021758708171546459, 0.00096386409131810069, 0.00076721166260540485, 0.0011937102535739541, 0.00060309719992801547, 0.00086788058979436755, 0.00047210411867126822, 0.00087283202446997166, 0.00092395581305027008, 0.00076619221363216639, 0.00046611198922619224, 0.00059350283117964864, 0.0011414475739002228, 0.001128310221247375, 0.00041726446943357587, 0.0011458059307187796, 0.00081172090722247958, 0.00044795367284677923, 0.001193381380289793, 0.00075336365262046456, 0.00066084740683436394, 0.00078802095958963037, 0.00073816755320876837, 0.00087342405458912253, 0.00078209472121670842, 0.00060241209575906396, 0.0010166442953050137, 0.00083119521150365472, 0.00095135299488902092, 0.00079773762263357639, 0.00085719407070428133, 0.00082930951612070203, 0.00083439215086400509, 0.00041112257167696953, 0.0020196596160531044, 0.0014095182996243238, 0.00064780423417687416, 0.0012721277307718992, 0.0016065681120380759, 0.00077500520274043083, 0.00041294100810773671, 0.00071236264193430543, 0.00083011854439973831, 0.0010400308528915048, 0.00072533008642494678, 0.00056993449106812477, 0.0016822892939671874, 0.00098231586162000895, 0.00083846336929127574, 0.00050536496564745903, 0.00074243952985852957, 0.00023809967387933284, 0.00040684861596673727, 0.00072685047052800655, 0.00037307949969545007, 0.00043645140249282122, 0.00051575532415881753, 0.00048713505384512246, 0.00027988795773126185, 0.00082480203127488494, 0.0014161252183839679, 0.00058483105385676026, 0.00030953003442846239, 0.0013486488023772836, 0.00075035286135971546, 0.00073380483081564307, 0.00071108387783169746, 0.0010799580486491323, 0.001029207487590611, 0.00055122713092714548, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -8018, 9795, -7537, -8554, -4942, 12745, 31506, -46377, -4740, 15883, 22703, 11514, -8953, 15047, -9097, 12345, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00072314491262659431, 0.00040779408300295472, 0.00022715653176419437, 0.00024100873270072043, 0.00038145668804645538, 0.00031630040029995143, 0.0002835587365552783, 0.0003403521841391921, 0.00029505189741030335, 0.00027797211077995598, 0.00062617281218990684, 0.00056696910178288817, 0.00044433577568270266, 0.00020291013061068952, 0.00059828901430591941, 0.00053159997332841158, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -11,-16,-3,-30,14,-5,-39,8,22,-4,-21,3,3,-14,-25,1,-7,8,1,6,9,-47,6,0,-2,19,-5,127,19,-40,51,-15,-7,14,10,1,-19,13,-52,-14,-15,7,-3,45,1,18,10,6,21,4,-14,4,10,-16,-23,87,10,11,-34,-29,-8,29,-1,-23,-30,-68,-17,32,3,2,17,-15,-15,-28,-14,-29,-21,25,10,-4,-14,-29,25,14,-14,-19,-2,-96,-8,-16,3,-9,48,-27,-36,-13, 
  /* [1][0][][] */ 52,-57,-94,-55,111,-43,42,47,-12,-73,-55,-31,6,-4,-44,12,-75,14,42,46,8,51,-27,-66,-10,-20,-7,-72,14,-32,-39,21,-13,43,-13,2,17,9,-14,1,-14,33,-33,-49,-32,114,22,6,36,-45,-4,-45,-44,51,44,13,-39,-12,-33,-27,22,-45,2,-43,-92,127,-29,-45,-11,-47,-31,3,70,-102,-49,-6,8,-81,27,17,-1,-35,10,10,-34,34,-37,44,6,-53,23,46,5,-6,52,73, 
  /* [2][0][][] */ 12,41,-96,1,76,59,14,78,6,-122,-13,-30,8,-29,36,-6,6,0,-44,77,7,-21,102,-11,28,41,-4,-54,5,2,50,-74,22,63,-28,41,-127,-64,20,6,14,-48,5,8,-4,-5,3,59,-20,37,-39,-26,78,-4,-23,85,43,18,28,11,17,8,33,-31,29,-24,-35,-38,-64,-25,-19,-38,-22,-69,-18,56,49,23,31,-28,16,-41,-9,-9,-54,5,-14,43,-56,8,-2,-10,-24,-53,-55,-1, 
  /* [3][0][][] */ 21,24,109,-16,38,-6,49,-24,-14,-60,39,-19,-11,51,23,116,30,-14,33,-5,121,9,34,56,53,-23,-5,22,50,25,-11,75,-80,-18,41,1,-16,-27,20,71,-69,-27,66,17,36,15,-37,-64,-60,-31,-4,62,7,-127,19,4,-95,69,29,29,32,88,-18,-24,28,65,11,-8,44,-1,7,-35,36,-16,37,-15,5,13,50,53,-15,-61,32,0,-15,18,43,27,52,21,27,4,57,102,22,-22, 
  /* [4][0][][] */ 19,-9,62,-20,127,34,14,-49,-30,-72,-21,-5,-27,24,-4,49,31,-90,-37,84,-2,5,62,9,0,-7,29,-61,32,-22,62,-28,71,-28,-30,4,43,14,24,45,-40,-3,-41,-12,6,-82,-4,1,38,3,7,24,14,-50,31,-26,-7,6,-50,22,10,60,55,40,47,36,-5,-3,-41,19,47,79,21,-63,-17,-21,26,65,86,-60,-6,-39,16,-15,-73,4,58,47,-38,35,-1,-65,27,14,7,-6, 
  /* [5][0][][] */ -13,-7,-2,-12,23,-2,54,-45,-34,-29,-10,15,-8,44,-14,48,-5,-14,18,-21,45,27,-50,75,24,-25,-7,-104,19,32,-3,39,-10,-15,18,-50,26,12,-1,38,-15,-16,21,-31,3,-38,3,-21,-29,-31,28,0,2,-43,-10,-71,-14,8,-23,10,78,26,-4,39,-7,68,6,117,16,106,19,39,-4,8,5,71,-34,-11,19,21,-5,-19,13,27,-7,27,6,127,17,40,-1,-21,15,17,-68,20, 
  /* [6][0][][] */ 55,-93,22,-41,-41,-5,36,34,21,-33,-22,-90,-20,-12,-24,29,27,6,2,22,-51,11,32,8,-53,20,1,-8,-55,20,73,-16,74,49,63,11,-30,-9,15,-127,-52,95,0,-41,2,0,-27,29,-24,36,-43,44,-17,-48,11,4,14,-58,-2,29,-36,58,43,-95,51,-46,17,-45,-7,4,125,-14,-36,-2,-54,38,-82,10,44,-14,21,44,17,-17,-58,-2,46,16,-3,-11,62,-47,-21,-9,-38,10, 
  /* [7][0][][] */ -19,127,62,11,74,45,54,-15,-12,-37,43,0,-27,33,19,45,14,-30,-1,26,50,-29,12,29,8,10,23,16,28,-18,22,-1,27,-6,-26,14,9,2,5,76,-47,28,23,13,-14,-30,16,-7,-52,-24,40,14,17,-46,-29,15,42,19,-23,4,-7,-39,-19,4,-35,81,1,-47,2,-19,0,61,-31,-24,0,3,44,75,41,-13,-27,-42,-7,-15,-11,43,29,-30,-12,23,-30,-65,-19,5,2,8, 
  /* [8][0][][] */ -24,10,75,26,-127,-22,46,-19,30,107,48,-2,-21,13,26,27,-56,0,9,-11,-46,9,-121,75,25,-62,56,-6,18,-9,-12,55,63,-34,-6,-18,-23,-27,-8,43,15,-10,51,-12,-36,-35,35,4,-105,17,8,28,-66,-29,-58,42,5,-61,-81,-33,20,-30,-49,-7,-6,87,-13,-41,16,-8,-46,-16,13,65,64,-10,-37,-58,-17,15,-76,12,-26,-7,41,22,70,56,36,-39,42,47,11,1,21,2, 
  /* [9][0][][] */ 26,-88,-25,17,78,50,-42,-14,19,-43,71,76,-4,9,79,-127,0,-16,-12,6,-44,-46,53,-10,-35,5,3,23,-33,8,8,-13,24,42,-122,18,-10,28,-45,51,47,-81,1,51,0,-5,-59,-41,41,44,-53,-93,35,23,-17,-40,-11,77,-1,-3,11,-54,-23,115,-89,-12,-16,-25,-4,6,-71,-81,55,8,1,23,39,-84,13,-16,5,-16,5,20,13,-78,13,12,-18,-42,-55,38,-64,-28,-1,-31, 
  /* [10][0][][] */ -67,-24,-38,-44,-26,18,78,-19,40,35,31,41,13,-8,-4,7,-4,18,-34,-24,-11,44,0,29,-7,-22,10,-127,33,-54,59,-38,-5,20,4,-1,6,20,16,2,13,-33,24,-55,10,-4,21,26,-8,39,-29,-9,-41,-19,-18,-65,21,19,-11,-35,33,20,-5,17,-44,106,-12,-17,17,-18,6,-23,-41,-14,21,53,-9,38,-21,22,-23,-1,6,27,18,-23,17,125,8,2,20,3,28,-17,39,-58, 
  /* [11][0][][] */ -101,27,20,-3,17,-33,-7,-9,-45,9,-1,21,13,34,-34,19,50,-3,-64,-65,21,2,-16,12,90,-8,53,12,7,16,-56,27,-9,1,-3,-10,-6,-11,32,29,-12,-1,2,-7,85,-15,66,25,34,23,3,44,6,-63,9,-11,-75,-21,-33,-41,4,-6,-8,20,-12,-18,25,24,29,20,0,36,-43,14,45,7,-16,78,-116,74,-21,-6,-57,-64,127,22,60,-14,24,54,-24,-70,-7,54,-40,-13, 
  /* [12][0][][] */ 7,1,-49,-5,54,16,-10,-8,-19,23,18,3,14,-19,24,-5,-22,-10,13,-23,-7,-29,-38,35,-9,36,-34,78,-26,40,-27,1,-7,34,-3,14,-17,-5,9,-4,3,-21,5,1,-13,1,23,7,4,11,-9,-21,-29,10,-27,-19,-3,-18,15,19,-11,-11,0,34,42,-56,3,34,-31,-127,-7,44,0,5,16,67,-3,-13,-4,3,-6,32,-28,-7,2,-10,-12,-26,-9,18,7,5,-35,4,7,27, 
  /* [13][0][][] */ -55,51,1,-6,-71,3,-2,19,-33,-57,50,34,110,0,-15,-12,-7,42,-43,11,31,-30,88,-47,55,78,19,-3,-8,-26,-8,-103,-94,0,-1,7,-21,30,46,-19,-38,86,-10,35,39,32,-15,13,61,-18,33,67,84,-63,103,-3,-27,74,37,12,2,39,-14,32,21,-44,14,-18,7,29,12,-127,37,-24,-86,17,70,74,-32,-60,77,-29,-7,-45,13,-44,88,6,-42,-17,-8,12,41,-48,-13,27, 
  /* [14][0][][] */ -15,16,-33,-38,33,-18,-39,39,-80,8,12,2,-27,-52,-64,-34,-70,-10,71,10,30,-5,-4,-113,-45,8,-41,-19,-10,-22,9,-38,-51,-21,17,17,-10,12,4,-30,3,76,-54,-25,-38,35,15,10,127,-2,4,-27,26,56,-80,15,2,25,-85,4,7,14,47,15,2,29,-12,-3,-45,16,60,18,35,-4,-40,24,46,-73,-28,-73,15,-28,7,46,34,-56,-56,15,-41,15,24,69,-4,18,34,-14, 
  /* [15][0][][] */ -15,-80,-28,-21,1,-1,-18,-43,-17,8,-11,-24,32,-27,53,-30,-75,10,-18,15,-24,-6,-67,-50,-19,12,-7,13,-35,-8,62,-90,-5,47,9,5,-6,33,-98,-22,31,-64,4,40,-40,-21,47,28,50,24,-30,-127,-9,51,-4,48,36,-3,-8,44,-4,-2,44,-3,10,-19,-11,-35,-27,11,5,26,-28,3,-9,-29,-31,-13,2,1,-11,42,-4,56,-11,-48,-53,-20,-51,46,29,83,-46,-8,13,-13, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.030733658000826836, 0.01733124814927578, 0.0096541522070765495, 0.010242871008813381, 0.016211908310651779, 0.013442766852676868, 0.012051246128976345, 0.014464967884123325, 0.012539705261588097, 0.011813814751803875, 0.02661234512925148, 0.024096185341477394, 0.018884269520640373, 0.0086236800998449326, 0.025427281856536865, 0.022592999041080475, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 21362, 63988, -3079, -277, 15948, -7318, -824, -1636, 5910, 14756, -2201, 520, 871, 3356, 5461, -9541, -4273, -262, -749, 13101, -10159, 20213, -3690, 7235, 33489, 161, -3376, 18152, 15475, -19035, 1435, 22284, 22812, -11537, 2226, 79, -1269, 272, 4909, -6144, -4283, -1056, -9771, -104, 29939, -1620, 11798, -1732, -14311, 2288, 2, 606, -2750, 17598, -5065, 12238, 20217, 35, 35134, 1050, -10056, -1411, 1211, 752, -351, 12281, -1955, -7682, -3289, 2562, 17, -3621, 2073, -40, -1969, -6183, -182, -2068, 41317, -8351, -6835, -11086, -1195, -1032, 57838, -14016, -12124, -28241, -8604, 7897, -1579, 36371, -340, -3826, -3452, 785, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00011199685832252726, 8.7717657152097672e-05, 0.00012652232544496655, 0.0002127962070517242, 0.0002077314566122368, 0.00011796344188041985, 7.9475496022496372e-05, 9.6316078270319849e-05, 0.00025810700026340783, 0.00016270315973088145, 0.00031476278672926128, 0.00011613836250035092, 0.00027615242288447917, 0.00021357019431889057, 0.00039990062941797078, 0.00012706068810075521, 0.00022188574075698853, 0.00020857526396866888, 0.00021029920026194304, 9.0161331172566861e-05, 7.4097464676015079e-05, 4.2811945604626089e-05, 0.00015118705050554127, 9.3167342129163444e-05, 8.2843711425084621e-05, 0.00011910374450962991, 0.00018802114936988801, 0.00016439000319223851, 7.3786424763966352e-05, 0.0005193503457121551, 0.00038453500019386411, 0.00021389979519881308, 0.00010828740778379142, 0.00013065172242932022, 0.00026730971876531839, 0.00042554448009468615, 0.00038597898674197495, 0.00026812334544956684, 0.00023582098947372288, 0.0001300125295529142, 0.00023406495165545493, 0.00018309950246475637, 0.00029696233104914427, 8.9529363322071731e-05, 0.0003559720644261688, 0.0001098985958378762, 0.00010367116919951513, 0.00027285754913464189, 0.0008324178634211421, 0.00011802925291704014, 0.00043169243144802749, 0.00015634416195098311, 0.00019960879581049085, 0.00017074232164304703, 0.00016318290727213025, 0.00013618344382848591, 0.00013965291145723313, 0.00044665156747214496, 4.3379357521189377e-05, 0.00016098875494208187, 0.00030873180367052555, 0.00032777240267023444, 0.0001501125079812482, 0.00017496640793979168, 0.00015703332610428333, 0.00016438537568319589, 0.00025729424669407308, 0.00027797458460554481, 0.00021819440007675439, 0.00016073099686764181, 0.00022324231395032257, 9.9204888101667166e-05, 0.000311488431179896, 0.00014260502939578146, 0.00037790712667629123, 0.00030628588865511119, 0.00011885182902915403, 8.7597501988057047e-05, 6.4078158175107092e-05, 0.00014368990377988666, 0.00022396331769414246, 0.00023512345796916634, 0.00016848476661834866, 0.00030697270995005965, 6.0839356592623517e-05, 0.00011079292016802356, 7.8575103543698788e-05, 0.00047753116814419627, 0.00026854604948312044, 0.00012806606537196785, 0.00041563055128790438, 3.0125707780825906e-05, 0.00017262782785110176, 0.00010205629223491997, 0.00032240658765658736, 0.00031726667657494545, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-73,-10,127,21,75,79,-58,-14,-17,-16,-4,-30,-2,36,0,-7,-42,27,20,22,-127,127,11,-88,13,48,-28,-122,-127,38,26,13,28,59,-20,-30,-9,31,-9,-12,28,-112,75,24,-70,38,48,-18,51,-23,22,5,-8,21,46,-97,-50,-63,-23,-9,3,12,37,67,-26,77,11,-10,16,20,127,23,22,22,1,-10,21,127,-4,-13,16,-27,21,127,19,-68,-16,3,-30,-15,-45,1,-24,-16,26, 127,-127,80,106,-43,127,39,-114,70,4,-19,127,127,-97,-13,12,14,127,127,-113,127,-71,79,75,-125,-103,-67,-33,-57,47,-58,-19,-89,52,-127,-84,-44,-14,-54,68,1,127,127,86,-53,-112,-112,-49,-15,-127,46,82,64,-31,48,81,-49,41,-81,-119,-41,-40,-61,66,71,-62,28,28,-77,34,-17,89,116,127,8,23,1,65,-33,51,66,127,127,-20,-6,73,-105,127,-111,-97,5,-127,-89,-127,-37,104, -75,-13,34,-84,15,-30,66,-7,79,-34,-29,19,-18,-5,-9,-13,-6,-16,6,-6,-19,-101,33,2,-127,99,6,-55,112,50,-13,10,0,21,12,-30,-8,34,17,10,26,13,-126,68,15,-18,37,15,-15,10,-15,7,-6,-3,2,22,-71,5,-33,52,3,41,34,-2,-6,-40,-29,23,4,4,-2,37,8,-25,-2,9,-11,-3,-85,3,-21,-24,-18,4,-112,6,-32,-22,-47,26,-26,-38,29,-27,-13,2, 
  /* [0][1][][] */ -67,-75,75,-35,-48,105,23,127,-52,-24,-1,-121,25,-115,77,37,-5,-60,-16,87,51,-77,45,55,-93,-10,127,-22,-26,63,118,-104,-127,98,-84,-59,-35,31,-28,97,-51,-26,-3,44,-46,127,-23,65,17,93,21,-3,19,-57,33,30,127,123,-73,-91,127,-29,-37,127,68,-39,-14,-2,127,41,127,94,-40,101,-1,13,13,14,-32,9,-42,118,-76,114,4,35,-48,31,82,-127,-32,-7,127,-67,-23,1, 67,124,62,-114,127,82,90,39,-127,127,127,-39,-67,-127,-127,127,127,-63,-123,-52,112,89,-122,127,-108,-90,-43,127,-127,109,-127,-127,-87,127,105,127,127,-127,-107,127,-68,-99,117,-127,-127,-37,-127,-127,127,-112,88,41,127,127,127,-127,99,-127,-127,127,20,-79,-127,-102,-127,127,-127,127,-116,-127,-108,-82,-127,-81,127,127,-127,127,-77,127,127,29,-40,-127,60,127,93,46,127,15,127,2,-66,40,127,-127, -58,-13,-46,39,-55,-106,38,-23,19,-36,-30,92,1,100,13,17,-2,63,-6,124,6,-84,-39,10,-67,99,-74,-20,-76,-18,19,-63,-70,45,5,-20,-27,43,-71,44,127,-4,-42,29,-41,-55,15,45,10,116,-8,5,-31,-76,9,19,95,2,-3,19,-35,127,94,-54,-42,11,34,-9,-76,123,-18,-83,-3,-56,-13,-20,26,18,76,-34,-70,-41,58,17,-47,-18,69,23,17,64,-45,16,-43,100,-26,-3, 
  /* [0][2][][] */ -72,2,-4,-23,13,-41,83,26,53,-29,-36,-6,18,22,-26,6,-9,64,9,3,-57,-76,4,-4,-26,-55,34,-67,85,38,25,23,17,-1,-11,-50,-6,33,-3,0,-18,-6,-69,92,6,32,14,36,-15,-32,11,-20,24,-6,15,13,-73,25,-16,13,17,2,-18,-5,-2,-45,-46,15,-26,14,26,26,12,-21,32,4,16,4,-80,-10,-7,-10,20,15,-123,16,16,-43,-52,-49,-27,-49,13,61,-20,-7, 118,32,-127,-37,-72,-26,48,34,-66,-30,-20,-111,-79,119,-13,42,2,-49,-8,-127,90,-55,-36,4,-112,127,-52,21,-39,-22,-8,-9,-60,25,26,4,-24,-30,127,53,8,-14,69,-32,-37,78,-65,-43,-33,-7,-127,-127,-45,-30,7,38,-70,-6,8,40,-6,-17,12,-49,-54,33,65,-18,113,105,-23,-70,9,-60,12,3,98,4,48,23,14,-99,-46,5,8,21,127,40,-53,40,-20,-112,41,87,-11,27, -60,12,-17,26,15,-74,-127,6,-12,-7,-17,2,15,-20,19,3,-7,-19,6,18,-48,-67,18,6,14,-90,16,4,-52,-40,-5,12,41,-9,-5,-29,-34,2,39,-41,18,-2,-53,-33,3,68,24,17,-8,-5,11,-9,20,-2,2,-4,-64,-12,-2,-42,-11,12,90,-13,35,-3,-1,30,2,5,-3,19,-18,11,6,14,35,1,78,-9,4,-8,-7,-14,76,5,46,-39,58,40,-16,-56,-8,5,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0047598662786185741, 0.0037280004471540451, 0.0053771985694766045, 0.0090438388288021088, 0.0088285868987441063, 0.0050134463235735893, 0.0033777086064219475, 0.0040934332646429539, 0.010969547554850578, 0.0069148843176662922, 0.013377418741583824, 0.0049358801916241646, 0.011736477725207806, 0.0090767331421375275, 0.016995776444673538, 0.0054000793024897575, 0.0094301439821720123, 0.0088644484058022499, 0.0089377155527472496, 0.0038318566512316465, 0.0031491422560065985, 0.00181950768455863, 0.0064254496246576309, 0.0039596119895577431, 0.0035208575427532196, 0.0050619090907275677, 0.0079908985644578934, 0.0069865752011537552, 0.0031359230633825064, 0.022072389721870422, 0.016342736780643463, 0.0090907411649823189, 0.0046022147871553898, 0.0055526983924210072, 0.011360662989318371, 0.018085639923810959, 0.016404107213020325, 0.011395242065191269, 0.010022391565144062, 0.0055255326442420483, 0.0099477600306272507, 0.0077817286364734173, 0.012620898894965649, 0.0038049980066716671, 0.015128812752664089, 0.0046706902794539928, 0.0044060247018933296, 0.011596444994211197, 0.035377759486436844, 0.0050162430852651596, 0.018346928060054779, 0.0066446266137063503, 0.0084833735600113869, 0.007256548386067152, 0.0069352732971310616, 0.0057877963408827782, 0.0059352484531700611, 0.018982691690325737, 0.0018436226528137922, 0.0068420218303799629, 0.013121102005243301, 0.013930326327681541, 0.0063797812908887863, 0.0074360719881951809, 0.0066739162430167198, 0.006986378226429224, 0.01093500480055809, 0.011813919991254807, 0.0092732617631554604, 0.0068310671485960484, 0.0094877984374761581, 0.0042162076570093632, 0.013238257728517056, 0.0060607139021158218, 0.016061052680015564, 0.013017149642109871, 0.0050512026064097881, 0.0037228937726467848, 0.0027233217842876911, 0.0061068208888173103, 0.0095184408128261566, 0.0099927466362714767, 0.0071606026031076908, 0.013046340085566044, 0.002585672540590167, 0.0047086989507079124, 0.0033394419588148594, 0.020295074209570885, 0.011413207277655602, 0.0054428079165518284, 0.017664298415184021, 0.0012803425779566169, 0.0073366826400160789, 0.0043373922817409039, 0.013702279888093472, 0.013483833521604538, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1581, 5811, 9269, 30847, 19032, -3242, -2036, 5285, 40686, -3310, 10922, 5915, 6894, 8715, 25942, 1171, 3088, 5922, 12438, 5635, -717, 364, 12230, -1222, 2612, -199, 8153, 7355, 7296, 36433, 36969, 20051, 5921, -803, 11069, 1863, 1810, 3740, 19113, -1205, 10837, 7938, 49016, -4177, 30176, 6643, 4903, 13734, 48284, 8344, -184, 12585, -5019, 130, -1954, 5983, -558, 18232, 4367, 8486, 5135, 15657, 6268, 6551, 8695, 7438, 4477, -6618, 6021, -3200, 4313, 8775, 16924, 5792, -5225, -5036, 7148, 74, 2396, -934, 11416, 15191, 4533, 21424, 2638, 426, 11671, 77215, 5768, 10452, 7664, -648, 5979, 6008, 5289, 12259, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00032084187841974199, 0.00025083267246372998, 0.00019132888701278716, 7.5557269155979156e-05, 0.00015877556870691478, 0.00030500994762405753, 0.00040841253940016031, 0.00030593914561904967, 5.8303161495132372e-05, 0.00041969676385633647, 0.0002485714212525636, 0.00015165990043897182, 0.00018707178242038935, 0.00026067596627399325, 9.3367096269503236e-05, 0.00041758490260690451, 0.00017747713718563318, 0.00020845717517659068, 0.00017892321920953691, 0.00022516914759762585, 0.00019796512788161635, 0.00066897115902975202, 0.00015966844512149692, 0.00047954244655556977, 0.0010001652408391237, 0.00021292148448992521, 0.00028129923157393932, 0.00019236333901062608, 0.00022818820434622467, 9.7560550784692168e-05, 7.6252785220276564e-05, 0.0001213345312862657, 0.0002733745495788753, 0.00032982495031319559, 0.00018148678645957261, 0.00030675227753818035, 0.00029429254936985672, 0.00039502381696365774, 0.00014163508603814989, 0.00047311314847320318, 0.00016887689707800746, 0.00020236780983395875, 5.5916647397680208e-05, 0.00024790680618025362, 0.00010811520769493654, 0.00023707862419541925, 0.00035498180659487844, 0.00019529688870534301, 8.5293759184423834e-05, 0.00025532813742756844, 0.00035614418447948992, 0.00013507326366379857, 0.00021723446843679994, 0.0002171910455217585, 0.0005394745385274291, 0.00018107527284882963, 0.00018490188813302666, 0.00010256846144329756, 0.00047394185094162822, 0.00018019719573203474, 0.00030341354431584477, 8.7374166469089687e-05, 0.00024200062034651637, 0.00015102274483069777, 0.0002842476824298501, 0.00025592854944989085, 0.00028876506257802248, 0.00020508162560872734, 0.00028827274218201637, 0.00025628096773289144, 0.00026327036903239787, 0.00017907048459164798, 0.00012188986875116825, 0.00017835351172834635, 0.00028300861595198512, 0.00025970913702622056, 0.00023168959887698293, 0.00037027208600193262, 0.00033092498779296875, 0.00042051650234498084, 0.0001805414940463379, 0.0001106432537198998, 0.00017866860434878618, 9.2125294031575322e-05, 0.00045342580415308475, 0.00026738282758742571, 0.00019463477656245232, 5.0462596846045926e-05, 0.00023632192460354418, 0.00021280099463183433, 0.00016218001837842166, 0.00026764092035591602, 0.00024411467893514782, 0.0002540603163652122, 0.00020862801466137171, 0.00014131153875496238, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 2,66,-9,38,20,25,26,-21,-26,15,-65,93,13,-127,15,-105, 
  /* [1][0][][] */ -3,66,5,-13,31,-36,113,-127,-7,85,-46,-11,14,-32,26,-3, 
  /* [2][0][][] */ -108,-8,-4,-44,8,-55,77,127,16,31,86,-8,-48,22,49,-15, 
  /* [3][0][][] */ -83,95,22,47,-62,52,70,127,3,83,-101,-12,37,-84,-110,-54, 
  /* [4][0][][] */ 4,-23,22,83,-1,86,2,57,30,-7,6,25,26,5,-127,-57, 
  /* [5][0][][] */ -9,-31,84,-19,-9,-36,4,45,-102,127,-27,-126,-26,25,-76,-51, 
  /* [6][0][][] */ 11,-3,14,-3,49,70,-79,-33,-17,14,55,36,127,-19,-27,-26, 
  /* [7][0][][] */ 36,1,127,-19,-5,-19,-5,8,-55,15,-70,-66,14,-4,52,11, 
  /* [8][0][][] */ 60,14,122,89,-58,92,31,105,34,-35,3,-91,-49,23,-126,-127, 
  /* [9][0][][] */ 34,-99,48,44,3,-64,16,24,107,-8,56,-28,1,36,-127,-16, 
  /* [10][0][][] */ -32,-66,38,-53,-90,-9,-55,17,65,104,84,-39,-19,45,127,29, 
  /* [11][0][][] */ 40,-73,-17,-127,12,-40,-75,-76,-101,5,18,-36,25,-20,3,6, 
  /* [12][0][][] */ -22,15,19,-37,-26,-29,-117,-18,-63,-89,-25,53,12,127,82,26, 
  /* [13][0][][] */ 14,-46,-23,51,0,-36,13,-25,35,42,-30,11,15,7,127,-12, 
  /* [14][0][][] */ -25,-38,46,3,4,4,17,127,5,47,-1,-34,-4,36,-51,113, 
  /* [15][0][][] */ 23,-24,-22,66,13,5,103,8,26,-127,4,-23,-20,-30,-12,-39, 
  /* [16][0][][] */ 33,-89,-5,30,9,-20,12,-68,123,66,93,-2,-34,127,106,121, 
  /* [17][0][][] */ -13,2,57,106,127,38,7,-14,58,-45,-5,-49,-1,40,-68,25, 
  /* [18][0][][] */ -41,25,49,46,-112,35,-18,42,-29,6,-63,-83,-19,-127,76,-13, 
  /* [19][0][][] */ 53,-76,40,-8,89,75,-86,63,104,-40,66,29,-47,118,65,127, 
  /* [20][0][][] */ 49,-44,35,-103,-13,-20,-38,24,-38,-64,105,22,18,-9,-66,127, 
  /* [21][0][][] */ -95,8,14,-47,-7,-20,-65,-31,-34,69,17,0,-127,-5,61,-17, 
  /* [22][0][][] */ 18,-23,46,-40,37,-77,-25,-45,-127,53,-26,-44,-19,-1,112,-40, 
  /* [23][0][][] */ 6,20,33,-5,10,17,-20,9,-11,-4,55,16,127,0,8,-39, 
  /* [24][0][][] */ -39,-6,-5,-59,21,18,23,15,-1,-9,1,-127,11,-32,59,-7, 
  /* [25][0][][] */ -55,60,34,-6,17,-81,-115,-117,-88,53,5,-122,-127,-109,68,6, 
  /* [26][0][][] */ 44,13,30,-107,95,7,-19,-9,127,-39,58,11,-1,65,-29,27, 
  /* [27][0][][] */ 116,-32,9,-27,-17,-35,-10,-10,-31,26,-127,33,16,-31,-8,35, 
  /* [28][0][][] */ -123,-23,-127,-82,40,-17,79,-50,-6,14,-109,-20,5,-34,-100,25, 
  /* [29][0][][] */ -58,-17,-12,127,-26,15,8,-31,-2,10,-50,43,15,-55,26,-29, 
  /* [30][0][][] */ 45,-28,127,-13,85,-2,-27,58,-2,-73,70,-76,-26,69,-59,117, 
  /* [31][0][][] */ 2,-107,-15,-87,1,-73,23,-50,-21,44,118,5,-21,94,100,127, 
  /* [32][0][][] */ -8,62,-43,30,-127,12,-61,-45,-55,-30,-12,41,13,43,47,62, 
  /* [33][0][][] */ -16,10,5,127,38,-6,55,-48,-117,83,113,-36,27,9,-13,103, 
  /* [34][0][][] */ 41,-17,7,-19,49,-59,-127,-21,-71,76,-52,14,-8,-17,-42,22, 
  /* [35][0][][] */ 27,11,-23,-3,28,-127,-39,-16,-26,-13,-31,21,48,14,-8,-2, 
  /* [36][0][][] */ 46,-22,-127,7,46,33,-24,33,-28,-13,-6,-21,22,24,-14,-3, 
  /* [37][0][][] */ 23,3,127,-14,-57,20,8,-62,-21,20,-18,-2,4,3,24,-6, 
  /* [38][0][][] */ -118,63,-18,68,40,90,38,-23,-26,-9,127,-42,-77,-15,-19,-47, 
  /* [39][0][][] */ -8,9,24,34,39,-13,-127,43,5,37,-6,-28,22,-17,-24,6, 
  /* [40][0][][] */ -25,55,9,127,23,10,63,49,-81,-41,-46,66,4,83,-26,-35, 
  /* [41][0][][] */ -5,18,-43,-52,-32,-31,127,78,-63,88,-13,-18,-15,78,32,-15, 
  /* [42][0][][] */ 15,-65,-2,-53,48,32,-95,9,47,-109,127,15,-17,-6,-95,16, 
  /* [43][0][][] */ -75,26,64,-114,-22,47,-83,-107,-57,61,-22,-58,-127,-63,49,-3, 
  /* [44][0][][] */ 9,12,34,40,-15,-12,1,-13,127,-2,-12,41,30,94,-6,30, 
  /* [45][0][][] */ -111,3,64,-74,35,-26,-3,23,35,-35,20,-61,35,127,39,78, 
  /* [46][0][][] */ -25,17,-20,93,-93,-36,-4,-81,-127,28,-37,-38,-1,29,8,-18, 
  /* [47][0][][] */ -30,24,-95,127,9,67,-15,0,30,37,46,70,-32,6,38,12, 
  /* [48][0][][] */ -28,13,78,-78,31,-42,-15,-29,-55,53,59,12,-10,27,127,10, 
  /* [49][0][][] */ -17,21,52,93,11,24,-75,-20,15,-43,-65,-21,-26,-40,-59,-127, 
  /* [50][0][][] */ 34,52,20,-112,49,2,30,57,127,-16,-11,-14,-8,-28,51,-4, 
  /* [51][0][][] */ 7,-103,21,-47,41,-79,-25,-127,18,-114,42,-26,-30,21,-41,55, 
  /* [52][0][][] */ -18,1,-18,18,47,-1,-76,102,-73,127,-15,-57,81,94,61,-73, 
  /* [53][0][][] */ 16,112,8,-71,-10,63,27,-3,-65,-31,-74,83,19,-118,-127,-97, 
  /* [54][0][][] */ -10,3,7,16,53,-34,18,-38,-10,28,2,-38,-8,127,-27,-29, 
  /* [55][0][][] */ -127,107,92,-17,24,-24,-10,-20,-34,25,63,-31,-10,-8,95,-8, 
  /* [56][0][][] */ 100,11,29,-99,105,20,-79,44,15,-49,35,127,12,-2,34,70, 
  /* [57][0][][] */ -28,2,35,49,-38,24,84,127,-16,23,11,-68,-11,73,-33,18, 
  /* [58][0][][] */ 3,127,0,-93,-6,23,13,37,94,8,-11,63,-1,-65,15,69, 
  /* [59][0][][] */ 24,64,52,-67,-60,10,46,21,35,32,76,-77,10,-127,-17,28, 
  /* [60][0][][] */ 75,-3,127,-56,-44,126,23,-48,-18,24,-18,16,42,2,37,-31, 
  /* [61][0][][] */ -1,1,-86,-62,-76,21,122,127,-49,120,14,-29,-16,102,7,-52, 
  /* [62][0][][] */ -22,-46,49,39,-50,11,-69,24,10,-9,-20,-127,4,-59,88,16, 
  /* [63][0][][] */ 36,-39,-3,-108,36,-27,-120,-127,-64,75,30,-30,44,-3,12,-21, 
  /* [64][0][][] */ -42,29,34,26,69,-17,-24,-127,16,-87,-15,-34,5,-20,14,0, 
  /* [65][0][][] */ -127,30,52,-61,0,64,38,-63,-72,21,42,-18,4,41,-1,-29, 
  /* [66][0][][] */ 54,-7,57,0,-89,21,-48,78,-48,-19,109,-127,5,52,-127,4, 
  /* [67][0][][] */ 40,6,-70,37,57,-74,-52,-105,61,-127,-56,-88,-91,8,-100,68, 
  /* [68][0][][] */ 2,-24,-34,45,-30,-55,2,-35,-46,24,27,-14,4,48,127,-49, 
  /* [69][0][][] */ -6,5,-90,45,-35,-64,23,90,34,25,83,21,127,13,32,21, 
  /* [70][0][][] */ -6,9,-27,-41,-38,18,127,79,-12,45,-24,-5,-2,65,-5,1, 
  /* [71][0][][] */ 31,-27,-32,-50,37,16,12,80,-22,-55,-5,-18,15,-127,51,19, 
  /* [72][0][][] */ 56,47,26,32,37,-63,-49,-127,5,55,-78,2,106,63,49,60, 
  /* [73][0][][] */ -37,-127,-50,-79,-103,-47,62,-10,-13,12,2,-66,35,-23,78,-13, 
  /* [74][0][][] */ -24,36,66,100,-19,11,-127,79,23,-26,-41,-48,16,-4,-49,9, 
  /* [75][0][][] */ -56,16,-27,8,-15,106,118,127,-5,31,-4,-18,-127,67,34,19, 
  /* [76][0][][] */ -8,4,-11,-31,14,-93,-127,-103,-37,-22,0,-46,48,-14,68,31, 
  /* [77][0][][] */ -36,16,-55,-59,-66,-47,7,-68,127,17,-36,16,-7,5,67,-58, 
  /* [78][0][][] */ -113,-127,-7,76,57,28,-9,20,-25,-82,-113,47,56,-38,87,90, 
  /* [79][0][][] */ 34,-5,34,-72,127,-6,75,13,77,21,7,20,-13,-27,5,-48, 
  /* [80][0][][] */ -3,-33,38,-127,-10,-39,-9,44,-59,-68,-41,-17,26,112,-33,8, 
  /* [81][0][][] */ 27,-34,40,62,15,93,-8,-13,12,-8,-47,-27,-18,48,-127,-15, 
  /* [82][0][][] */ -64,3,22,-127,-21,-37,-30,-39,-25,-37,-17,-64,19,-95,-27,13, 
  /* [83][0][][] */ -39,-10,-14,-101,-44,-8,17,13,-84,-14,-15,-127,-11,-112,11,121, 
  /* [84][0][][] */ 127,28,31,49,-50,-23,-61,24,-5,-26,87,-15,-50,32,55,-61, 
  /* [85][0][][] */ 0,-21,54,-3,41,0,-9,127,-79,-117,-55,10,-74,77,66,-104, 
  /* [86][0][][] */ 24,35,-31,-12,-48,90,-53,-3,-94,-40,51,0,-12,-127,-53,15, 
  /* [87][0][][] */ 127,-24,36,-16,-49,-41,6,5,-13,26,-98,19,33,-9,-9,35, 
  /* [88][0][][] */ 20,17,-23,-2,-11,-37,1,-34,49,-8,11,62,-12,-11,127,-59, 
  /* [89][0][][] */ 61,95,-71,-24,-60,-40,18,-103,55,35,7,-23,-37,-4,-28,-127, 
  /* [90][0][][] */ -21,-7,-10,-80,-92,1,127,-90,52,-101,35,-73,36,-31,-2,-5, 
  /* [91][0][][] */ 42,-30,-11,-127,-4,47,-25,-51,-70,9,98,83,28,-29,10,115, 
  /* [92][0][][] */ 29,2,-8,-1,55,-5,-68,-127,26,-86,-5,-23,-11,-34,3,-41, 
  /* [93][0][][] */ 111,-10,27,-122,-26,20,-54,29,54,-73,108,-11,-38,127,-16,-10, 
  /* [94][0][][] */ -76,30,-99,17,97,-127,-51,6,-9,-67,74,5,1,-6,-49,-22, 
  /* [95][0][][] */ -22,120,40,-127,7,7,-55,-1,42,-21,-80,-63,-25,49,-57,5, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00097239838214591146, 0.00076021655695512891, 0.00057987414766103029, 0.00022899681061971933, 0.00048121248255483806, 0.00092441547894850373, 0.0012378051178529859, 0.0009272316237911582, 0.0001767035573720932, 0.0012720050290226936, 0.00075336318695917726, 0.00045964651508256793, 0.00056697183754295111, 0.00079004932194948196, 0.00028297433163970709, 0.0012656043982133269, 0.0005378926289267838, 0.00063178606797009706, 0.00054227537475526333, 0.0006824362208135426, 0.00059998704819008708, 0.0020274987909942865, 0.00048391858581453562, 0.0014533835928887129, 0.0030312724411487579, 0.00064531638054177165, 0.00085255369776859879, 0.00058300932869315147, 0.00069158629048615694, 0.00029568374156951904, 0.00023110477195587009, 0.00036773722968064249, 0.00082853581989184022, 0.00099962402600795031, 0.00055004499154165387, 0.00092969601973891258, 0.00089193350868299603, 0.0011972269276157022, 0.00042926357127726078, 0.0014338978799059987, 0.00051182729657739401, 0.00061333057237789035, 0.00016947058611549437, 0.00075134891085326672, 0.00032767248922027647, 0.00071853114059194922, 0.0010758687276393175, 0.00059190025785937905, 0.00025850589736364782, 0.00077384128235280514, 0.0010793916881084442, 0.00040937619633041322, 0.00065838801674544811, 0.00065825640922412276, 0.0016350239748135209, 0.00054879777599126101, 0.00056039536138996482, 0.00031086156377568841, 0.001436409424059093, 0.00054613652173429728, 0.00091957708355039358, 0.00026481112581677735, 0.00073344859993085265, 0.00045771541772410274, 0.00086148973787203431, 0.00077566091204062104, 0.00087518093641847372, 0.00062155554769560695, 0.0008736888412386179, 0.00077672908082604408, 0.00079791236203163862, 0.0005427217110991478, 0.00036942033329978585, 0.00054054876090958714, 0.00085773447062820196, 0.0007871190900914371, 0.00070219824556261301, 0.0011222100583836436, 0.0010029580444097519, 0.0012744894484058022, 0.00054718001047149301, 0.0003353344218339771, 0.00054150371579453349, 0.00027921071159653366, 0.0013742300216108561, 0.00081037625204771757, 0.00058989354874938726, 0.00015294059994630516, 0.00071623775875195861, 0.00064495118567720056, 0.00049153057625517249, 0.00081115850480273366, 0.00073985580820590258, 0.0007699987618252635, 0.00063230382511392236, 0.00042828300502151251, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -977, 5223, 14357, 23014, 25456, 957, -9533, -8417, 28862, 7693, 25753, 18571, -4878, 9485, 34121, -23779, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00045781981316395104, 0.00033006496960297227, 0.00024035676324274391, 0.00021479051792994142, 0.00037585309473797679, 0.00033194664865732193, 0.00030587171204388142, 0.00031415384728461504, 0.00022032941342331469, 0.00029229873325675726, 0.0003884754260070622, 0.00068308773916214705, 0.00040718502714298666, 0.00046894489787518978, 0.00057015387574210763, 0.00032600364647805691, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -9,24,5,29,66,72,-41,-16,40,-5,-2,-7,-21,10,31,66,6,5,-8,-29,105,-51,4,-27,-25,-21,-21,-93,-17,1,56,43,127,0,24,-2,1,-35,-24,13,-40,24,13,-16,4,-30,-14,28,-21,15,3,-17,-39,-21,-9,1,31,21,-22,-38,-44,3,-8,-20,22,3,65,1,10,-4,-13,-17,-70,-5,-19,-14,12,-81,-20,-9,18,-15,-49,-48,40,-16,33,28,-12,2,13,-59,34,23,-14,126, 
  /* [1][0][][] */ 49,-101,30,77,-11,-83,-40,-51,-23,-72,-23,43,4,-101,-40,-115,-101,-6,20,33,-41,-127,-3,11,122,-55,-68,23,-62,105,-26,61,6,22,-57,48,-8,-10,60,-25,17,-80,68,-31,-31,-13,45,3,44,-19,-12,-44,62,-52,22,-26,13,-5,-8,-114,6,-57,36,-56,-2,-80,15,47,15,8,-87,-9,-106,26,17,28,7,67,31,-53,24,-5,-64,15,-103,47,-22,77,-48,2,-20,3,1,-49,19,0, 
  /* [2][0][][] */ 14,-4,-29,-52,-11,-2,-38,11,65,-21,26,60,-22,-1,28,-24,-30,-24,21,35,-15,-72,11,-53,-21,-13,-29,-2,-34,9,97,-83,26,-57,-42,34,14,127,-48,-28,38,-35,-23,28,-54,-65,-53,-14,29,-11,-27,-2,39,-10,-27,-45,-58,16,10,9,-8,11,68,84,-1,-81,5,-83,-39,-31,-28,2,-21,2,-23,7,1,36,6,3,7,70,21,-17,-30,9,13,6,-15,-16,-24,-53,-59,4,-14,49, 
  /* [3][0][][] */ -6,-13,-51,29,34,-36,14,-26,-13,24,8,5,-6,-14,52,16,43,-46,4,14,5,-7,-31,-15,2,17,-3,1,24,-42,52,-10,9,-15,-23,52,-8,28,-16,9,6,-73,35,-23,0,-13,-24,4,-121,46,-20,36,-127,-38,-25,-40,51,2,-8,61,-1,43,-7,22,-18,-85,-51,38,36,35,5,29,-36,13,5,-23,-53,-51,33,-33,28,-19,23,74,51,62,35,25,37,-11,-6,28,-25,20,-12,-27, 
  /* [4][0][][] */ -6,-22,1,-58,-5,-18,-34,0,-23,-35,-44,-8,5,67,13,14,49,-8,17,-2,7,16,42,-3,3,-7,11,10,-7,-5,-1,-5,-35,-1,8,16,26,-15,-3,-16,3,2,-82,-28,26,-12,-5,-21,2,71,-29,-21,-10,5,3,-12,0,-19,17,36,18,1,-7,3,20,-114,13,-8,-44,26,-4,-3,-14,29,-23,47,-23,54,37,26,5,0,127,-39,55,-11,-8,-3,80,9,-10,32,-45,25,-7,-51, 
  /* [5][0][][] */ 3,-5,-20,0,-3,-23,15,112,44,-24,-14,-21,-26,36,47,47,-17,-5,2,-39,-60,-19,-25,-70,27,12,14,71,92,6,75,49,-61,16,8,5,-50,-51,-38,-16,-56,-16,-6,-7,68,10,-3,11,17,29,-30,12,-38,-12,11,-5,-2,-18,-25,31,-63,43,-12,-36,12,15,-29,14,-11,34,22,3,28,19,12,19,-22,27,3,127,-5,-37,16,34,29,-18,14,-20,14,-12,25,-117,-37,-17,-4,-122, 
  /* [6][0][][] */ -37,8,24,-75,-19,-20,-19,26,6,57,-6,-8,76,-66,9,-15,3,-65,27,13,6,-1,-4,34,78,-19,3,38,48,-13,21,5,-31,-19,-39,5,52,2,59,46,-14,-29,-53,-9,-2,-26,38,-127,21,24,18,15,15,8,-16,-25,29,-9,-3,-3,38,18,13,3,37,69,36,-11,-3,-17,-23,-10,5,11,68,-27,-23,34,19,13,-11,6,56,-28,-10,57,11,-7,23,-6,-41,0,-27,3,-6,11, 
  /* [7][0][][] */ 28,16,28,-18,1,-9,9,-19,5,-10,-27,-13,-36,-85,53,39,0,-35,-21,-23,0,-15,-38,-16,-15,2,17,-26,12,15,8,-16,-12,0,-3,-20,-4,-31,-43,32,-4,-15,-30,41,-14,22,-5,81,-12,35,-14,-38,-34,7,3,-77,59,-7,-1,-7,-2,8,-13,-7,-15,64,20,-23,-9,14,25,36,-13,-16,-24,24,48,14,-9,-15,17,-33,36,-4,-30,127,-2,2,-35,1,2,5,-10,15,3,4, 
  /* [8][0][][] */ -67,33,-53,12,31,-22,-3,20,4,51,-47,-8,-12,49,79,4,-7,19,-85,29,-7,43,-20,9,-40,-35,-5,10,78,-105,-19,-7,44,15,-1,6,-29,20,-59,41,-11,-4,24,-127,-70,-8,44,-20,-66,57,15,59,-120,60,17,-20,26,-21,-44,-1,-6,-24,28,33,4,64,24,-36,1,19,60,74,-30,13,24,21,-14,-88,-10,-70,-30,-15,19,1,-45,-2,33,-69,-11,65,-11,-18,23,-30,-23,-14, 
  /* [9][0][][] */ 24,-49,-33,-37,11,2,-40,11,24,-16,3,16,-25,-24,-20,-6,-8,-4,41,-11,-22,9,2,-32,33,-7,33,-1,-47,-38,-26,-14,0,-6,-4,34,8,45,-27,2,22,-16,-7,-104,12,-20,21,-127,-43,-30,-1,41,-24,3,-18,2,-41,3,4,13,14,-5,8,43,15,109,32,39,16,-26,-17,-27,-11,5,-13,6,63,3,22,9,2,14,21,-48,3,37,9,15,-63,11,-45,18,10,11,3,-17, 
  /* [10][0][][] */ 35,36,-39,27,72,-100,-10,-27,-8,53,47,-3,-17,19,5,-74,32,39,-31,31,-85,-21,-7,-45,-64,-8,-60,56,30,22,11,27,-1,-6,39,-4,89,-16,-39,-1,-11,69,43,-22,-70,-7,-26,6,-2,-22,-22,-3,-13,-9,-1,-4,-4,36,-14,3,-4,36,-9,17,8,45,47,29,12,21,62,22,-60,-13,-58,5,-21,18,-13,12,46,-5,-62,-44,63,-54,92,-5,-7,19,32,-7,87,39,-20,-127, 
  /* [11][0][][] */ 52,42,-32,29,3,13,68,-1,-15,-35,-22,-7,-18,5,49,16,5,-6,-108,-26,2,13,-3,-22,-33,-21,-9,-1,13,31,10,-5,-7,13,23,35,-9,17,-18,15,-5,34,65,-102,27,-59,-2,-2,-127,36,-5,-47,19,28,-5,9,0,-13,-8,14,15,-14,-5,27,-45,55,-26,7,20,8,39,11,-47,-24,1,34,-9,-33,-60,4,-6,-3,87,56,36,-22,-3,-9,19,36,-3,-6,-8,7,-19,18, 
  /* [12][0][][] */ -30,-5,13,13,-31,26,25,-11,127,-29,-43,-7,-11,8,-43,-53,27,29,23,48,30,54,4,-10,13,-5,40,-43,-118,-8,21,-55,21,-4,-2,-27,1,-22,1,-16,-41,-19,0,-2,-5,36,16,-5,1,12,-37,-4,-3,-16,22,-23,69,-23,13,7,20,-33,11,7,-20,41,-47,7,9,3,-21,-31,9,-1,-91,-2,44,4,-18,-59,-36,16,51,41,2,-18,-11,-22,18,31,6,48,-12,-23,21,13, 
  /* [13][0][][] */ 25,-2,-25,16,32,6,0,3,-6,16,24,-2,19,-8,6,-13,26,-68,-36,10,2,-18,11,10,-1,19,2,0,-11,-30,-7,11,7,2,-2,34,29,6,10,19,8,1,18,40,16,16,-4,-127,12,-17,9,15,-12,3,8,8,-17,11,30,13,14,13,-23,-2,-5,-13,-15,-50,13,16,-9,-27,1,42,-12,29,-25,2,20,10,36,-18,-16,22,5,43,20,21,-12,2,19,-8,3,19,-3,-11, 
  /* [14][0][][] */ -101,-56,19,22,20,-6,-43,4,-12,12,3,-2,73,-3,-127,-12,67,-12,-5,55,-4,-8,37,27,-96,1,15,1,-22,-62,-34,-5,6,7,15,-49,26,38,12,3,25,21,6,-44,6,102,56,41,-80,39,33,25,-29,-21,26,2,-7,7,45,70,44,53,16,26,-1,-23,-43,25,-3,58,-40,-72,-60,-1,-6,26,-13,30,72,-8,57,-3,31,9,20,7,41,21,21,41,54,-11,0,3,11,-23, 
  /* [15][0][][] */ 86,-27,54,-15,-26,75,3,-10,-14,65,23,6,-92,-12,-23,8,8,30,51,-6,9,31,-68,96,5,2,64,0,26,44,-78,-100,12,-45,21,-18,37,-65,-40,-107,13,4,-16,39,-19,64,-11,-34,96,-75,-34,35,49,-126,52,-108,-29,-53,30,15,-127,-11,21,18,84,-11,-51,47,-29,56,-30,14,58,22,1,-3,22,-52,80,-12,-14,-18,29,77,-31,1,6,-58,-21,-32,63,4,-76,59,17,-12, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.019457342103123665, 0.014027761295437813, 0.010215162299573421, 0.0091285966336727142, 0.015973756089806557, 0.014107732102274895, 0.012999547645449638, 0.013351538218557835, 0.0093639995902776718, 0.012422695755958557, 0.016510205343365669, 0.029031228274106979, 0.017305362969636917, 0.0199301578104496, 0.02423153817653656, 0.013855154626071453, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10821, -9624, 3252, 61822, -1228, -4045, -10763, 1241, -2867, 656, 2458, -1520, 187, -7018, 4665, -5472, -2474, 15746, 27086, 1829, 1676, -1848, -834, -80, 19390, -940, -1742, -3723, -6380, -7585, 7594, -9641, 358, -783, -327, 14021, 1308, -4143, 22926, 628, -180, 2311, -9333, -7690, -7620, 67710, -674, 15255, 29503, -13390, -27, 8571, 6689, -1281, -5878, 3189, -12776, 1583, 1345, -5779, -1854, -819, -10476, -3533, 1674, 15000, 30032, 27987, -12285, 233, -9069, -870, 49638, 8929, -219, 180, 17961, 32676, -492, -7900, -1809, -9646, 320, -2686, 134, -312, 493, -691, 1309, -2975, -117, 373, 2045, 132, 663, 48138, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00019422004697844386, 0.00011149524652864784, 0.00030243757646530867, 3.4665470593608916e-05, 0.00018496935081202537, 0.00016937071632128209, 0.00031267100712284446, 8.0994068412110209e-05, 0.00011175229155924171, 0.00047977312351576984, 0.00019044254440814257, 0.00028832184034399688, 0.00011063016427215189, 0.0003768342430703342, 0.00020339968614280224, 0.0001471308059990406, 0.0001092540769604966, 0.00026475434424355626, 5.6546155974501744e-05, 0.00033071311190724373, 4.5548400521511212e-05, 0.00019848515512421727, 0.00012762246478814632, 0.00040275967330671847, 0.00017929113528225571, 0.00021314283367246389, 0.00014783906226512045, 0.00018151436233893037, 0.00012645016249734908, 0.00010391331306891516, 0.00012546598736662418, 0.00015993734996300191, 0.00012498488649725914, 0.00014392794400919229, 0.00024637524620629847, 0.00016930955462157726, 0.00044880778295919299, 0.00011815354810096323, 4.1836181480903178e-05, 0.00011511806951602921, 0.00027359809610061347, 0.00040835957042872906, 0.00038625486195087433, 0.00015427077596541494, 0.00018699099018704146, 4.6908411604817957e-05, 0.0002273029531352222, 0.00023379224876407534, 9.2693604528903961e-05, 0.00018036059918813407, 0.00019096494361292571, 0.00016280041018035263, 0.00025080732302740216, 0.00028837242280133069, 0.00028189172735437751, 0.00045905890874564648, 0.00030248574330471456, 0.00020785327069461346, 0.00011472873302409425, 8.7547778093721718e-05, 0.00030172214610502124, 0.00015668968262616545, 0.00032842723885551095, 0.00013275243691168725, 0.00019527247059158981, 0.00019547560077626258, 8.2968974311370403e-05, 6.367199239321053e-05, 0.0003372491046320647, 0.00024216115707531571, 0.00021301102242432535, 8.3246181020513177e-05, 0.00011423245450714603, 0.00013154115003999323, 0.00014118378749117255, 0.0002394479961367324, 0.00048754710587672889, 4.8820340452948585e-05, 0.00029432857991196215, 0.00023289163073059171, 0.00016783110913820565, 0.00021653492876794189, 0.00014692706463392824, 0.0001268013147637248, 0.00014754975563846529, 0.00010173210466746241, 0.00013862823834642768, 0.00019411178072914481, 0.00020153145305812359, 0.000113305875856895, 0.0002070688788080588, 0.00011063613055739552, 0.00015921860176604241, 0.00045850922469981015, 0.0019476915476843715, 8.1718208093661815e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -19,7,-21,109,-16,20,-63,-55,16,-6,103,-10,5,-8,-3,58,7,18,-32,4,77,1,32,-34,3,17,43,48,23,12,22,47,-10,25,9,-17,6,49,-70,-27,20,9,26,19,-82,-51,27,-6,-12,-17,-9,-6,49,7,-8,1,-2,-31,27,-32,28,0,127,28,-13,-12,7,-48,65,37,4,-5,78,-29,70,4,16,-127,27,67,3,10,127,-17,38,27,-25,-20,36,-10,-14,80,-1,20,-4,12, -50,17,-8,12,51,-11,-11,-127,38,14,-127,-5,-13,-13,6,101,18,-31,-17,-16,80,-96,127,26,-61,-32,-104,-15,33,36,-50,17,115,10,-12,-3,-23,127,-72,-127,9,-19,-31,12,45,-127,127,-46,-77,52,46,6,39,-62,32,54,42,42,-95,84,127,34,4,-18,42,-38,-95,4,37,-29,-14,50,-51,-47,108,-3,-32,-62,-35,68,-62,60,-16,9,-10,45,54,-41,-25,50,-12,72,-127,-30,21,-127, -1,-1,-23,-73,9,17,38,22,-6,-1,3,61,1,-13,-9,11,-13,18,-17,16,8,24,23,-32,-1,-33,13,12,-3,7,45,-78,43,14,12,-24,14,6,-40,-22,8,2,-18,10,21,-33,22,-1,5,-9,8,-5,5,7,-6,7,-7,45,9,-2,13,-18,5,-14,-26,-19,26,-46,-107,-6,44,-14,-127,-20,-8,16,8,-12,7,13,-13,22,-39,-4,-39,18,26,35,-23,-18,25,-12,15,8,-3,-45, 
  /* [0][1][][] */ -42,62,-18,42,-84,-17,-10,-44,25,96,-43,-23,-29,-25,-4,60,127,-24,-92,-12,60,-127,-26,15,-33,-49,-127,-6,39,36,-50,29,-127,-76,-56,2,65,-3,-58,47,-19,86,3,-2,34,-48,-11,-33,127,48,-6,19,45,11,-37,-17,38,8,-119,127,-36,-90,20,127,-60,-36,-88,124,-36,127,-20,56,-35,-55,36,8,-35,-69,127,48,127,30,6,-3,127,29,-95,47,-39,-36,-101,39,92,99,27,-60, 127,127,127,127,-44,-127,127,24,127,-127,19,-127,-98,127,127,127,-12,-127,-60,-127,127,23,-63,127,127,127,-56,-127,127,127,-127,127,-8,-127,-118,127,-127,-45,98,109,-127,-127,127,127,127,-115,-106,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-36,40,-104,-26,-71,-63,127,127,-64,127,127,-106,-127,127,-45,127,-127,-127,-127,126,-77,127,-41,127,82,127,-38,-127,-27,-105,-127,-127,-21,-127,-23,-127,-127,117, -25,67,-39,4,127,71,-21,47,4,26,-14,-6,-25,-31,-12,-8,-101,-22,-127,39,33,76,-11,-112,-34,-42,125,74,11,39,72,9,122,-50,127,-3,55,8,-103,15,36,23,-23,1,-22,-52,-11,-43,81,17,-13,38,-5,-2,-75,-15,28,18,127,-87,4,127,1,-33,-111,-29,-73,97,14,-16,116,27,-18,-54,15,47,-28,-8,-40,-1,-46,1,42,22,-89,34,127,-47,32,-22,127,-10,-116,33,32,18, 
  /* [0][2][][] */ -5,-36,-22,-63,-4,17,40,30,0,10,-19,51,26,-34,-5,8,42,1,4,23,-9,29,-17,-25,1,-27,8,5,-8,-4,49,-72,-40,66,-25,-27,31,-33,-73,18,11,11,-32,19,11,-80,-11,-2,-7,13,15,-9,8,2,-22,7,2,43,-49,34,-5,-12,4,19,-7,-9,23,-51,-55,10,-24,-13,-115,-35,3,19,17,-11,59,19,21,22,-41,16,15,28,-22,13,3,26,22,-7,15,40,-6,-33, -30,-8,-27,25,-44,73,-25,65,8,-4,56,-11,127,-7,-19,-14,0,-40,-65,26,-27,78,-42,-108,-48,-48,102,68,16,45,53,-1,-116,62,-11,-25,-28,-25,-127,-4,45,-12,-14,35,-27,-50,-18,-49,-59,33,66,21,-11,-79,31,52,21,25,73,-54,18,-60,-10,3,18,-25,-127,-55,-10,-28,-62,20,35,-50,-28,-6,-43,24,-55,1,49,36,20,11,6,62,-90,127,16,127,-31,-20,108,-21,46,85, -11,-32,-25,30,12,63,-45,13,6,-4,1,12,17,-51,-10,-13,-45,-5,11,21,-26,3,-20,6,-5,19,-1,53,-2,-1,34,30,21,42,22,-24,-5,-24,-33,7,13,-11,21,10,-74,-37,-12,3,0,-11,-1,-6,-8,8,-18,-6,1,-47,15,-30,-24,49,11,-26,-11,-1,32,-55,45,5,58,-17,31,-57,-13,23,13,13,-1,25,-30,28,81,-15,-18,55,42,-8,110,15,2,-21,6,-22,-7,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0082543520256876945, 0.0047385478392243385, 0.012853597290813923, 0.0014732824638485909, 0.0078611969947814941, 0.0071982555091381073, 0.013288517482578754, 0.0034422478638589382, 0.0047494722530245781, 0.020390357822179794, 0.0080938078463077545, 0.012253678403794765, 0.0047017820179462433, 0.01601545512676239, 0.008644486777484417, 0.006253059022128582, 0.0046432982198894024, 0.011252059601247311, 0.002403211547061801, 0.014055307023227215, 0.0019358069403097034, 0.0084356190636754036, 0.0054239546880125999, 0.01711728610098362, 0.0076198731549084187, 0.0090585704892873764, 0.0062831602990627289, 0.0077143600210547447, 0.0053741317242383957, 0.0044163158163428307, 0.0053323046304285526, 0.0067973369732499123, 0.0053118574433028698, 0.006116937380284071, 0.010470948182046413, 0.0071956561878323555, 0.019074330106377602, 0.0050215255469083786, 0.001778037752956152, 0.0048925178125500679, 0.011627919040620327, 0.017355281859636307, 0.016415830701589584, 0.0065565081313252449, 0.0079471170902252197, 0.001993607496842742, 0.0096603753045201302, 0.0099361706525087357, 0.0039394781924784184, 0.0076653254218399525, 0.0081160096451640129, 0.0069190175272524357, 0.010659310966730118, 0.012255827896296978, 0.011980397626757622, 0.019510002806782722, 0.012855643406510353, 0.0088337641209363937, 0.0048759710043668747, 0.0037207803688943386, 0.012823191471397877, 0.0066593112424015999, 0.013958157040178776, 0.0056419786997139454, 0.0082990797236561775, 0.008307713083922863, 0.003526181448251009, 0.0027060597203671932, 0.014333087019622326, 0.010291849263012409, 0.0090529685840010643, 0.0035379626788198948, 0.004854879342019558, 0.0055904989130795002, 0.0060003111138939857, 0.010176539421081543, 0.020720751956105232, 0.0020748644601553679, 0.012508964166045189, 0.0098978942260146141, 0.0071328221820294857, 0.0092027345672249794, 0.0062444000504910946, 0.0053890557028353214, 0.006270864512771368, 0.0043236142955720425, 0.0058916998095810413, 0.0082497503608465195, 0.0085650868713855743, 0.0048154997639358044, 0.0088004274293780327, 0.0047020353376865387, 0.0067667905241250992, 0.019486641511321068, 0.082776889204978943, 0.0034730236511677504, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 16930, 883, 6785, -605, 4749, 4909, 11467, 5823, -932, 14802, 7471, 1914, 6714, 23475, -781, -1826, 6712, 12415, 1331, -171, -559, 24946, 3792, 3169, 6382, 5124, 4755, 3948, 11, -8, 5457, 8433, 18296, 2164, 9757, -501, 16442, 6673, 616, 3394, 702, 12995, 11994, 4090, 4617, 12908, 15623, 8351, 4527, 3583, 317, -1195, 13320, 7036, 8083, 16012, -231, 9715, 1820, 3380, 11007, 6958, 2964, 6786, 6495, 5601, 4676, -1064, 11707, 5690, 7548, -1120, -1395, 4631, 2199, 2422, 16777, 11990, 14125, -2799, 3030, -5252, -2241, 607, 7417, 7344, 4734, 4743, 10727, 3207, 9192, 3290, 24264, 16491, -10613, 16554, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015306727436836809, 0.0003255774499848485, 0.00018978677690029144, 0.00089778227265924215, 0.00033109314972534776, 0.00019952333241235465, 0.0002744630619417876, 0.00060767051763832569, 0.00046867155469954014, 0.00011991490464424714, 0.00019907868409063667, 0.00043304826249368489, 0.00040062473271973431, 0.00020790785492863506, 0.00024691471480764449, 0.00034351606154814363, 0.00031737281824462116, 0.00018421997083351016, 0.00029589564655907452, 0.00054584624012932181, 0.00048196798888966441, 9.8368327599018812e-05, 0.00040457633440382779, 0.00022903054195921868, 0.00028116072644479573, 0.00041370646795257926, 0.00029812235152348876, 0.00023304842761717737, 0.00057721859775483608, 0.00043569065746851265, 0.00025439131422899663, 0.00021997503063175827, 0.00010636570368660614, 0.00050193397328257561, 0.00017253364785574377, 0.00058726599672809243, 0.00013829980161972344, 0.00039659114554524422, 0.00066672463435679674, 0.00026394089218229055, 0.00062466092640534043, 0.00014563581498805434, 0.00017479699454270303, 0.00019038593745790422, 0.00025020184693858027, 0.00025501102209091187, 0.00018510727386455983, 0.00017696505528874695, 0.00035009364364668727, 0.00024549392401240766, 0.00041232266812585294, 0.0005157979903742671, 0.00020174984820187092, 0.00022438399901147932, 0.00029082092805765569, 0.00011921954137505963, 0.00038225637399591506, 0.00018248868582304567, 0.00043000347795896232, 0.00046859646681696177, 0.00015390836051665246, 0.00019877278828062117, 0.00034617047640495002, 0.00040080369217321277, 0.00015822952263988554, 0.0002052988565992564, 0.00041529946611262858, 0.00029554302454926074, 0.0002296092570759356, 0.00020427897106856108, 0.00025755370734259486, 0.00042564028990454972, 0.00030253361910581589, 0.00026347505627200007, 0.00019826245261356235, 0.0005187409115023911, 0.00013847665104549378, 0.00037227926077321172, 0.0001162059634225443, 0.00043375178938731551, 0.00034506167867220938, 0.00038131972542032599, 0.00020400735957082361, 0.00045874353963881731, 0.00020993109501432627, 0.00021858810214325786, 0.00033006008015945554, 0.00028020597528666258, 0.00014980130072217435, 0.00048171202070079744, 0.00015081149467732757, 0.00053012656280770898, 8.6386236944235861e-05, 0.00016731346840970218, 0.00027348744333721697, 0.00019645100110210478, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 38,-8,110,91,70,-35,30,-34,127,-11,-77,-92,7,73,-37,-95, 
  /* [1][0][][] */ 43,77,-34,9,106,-16,6,25,76,34,-47,127,-15,-37,89,-42, 
  /* [2][0][][] */ 23,-42,-13,-2,-33,20,-68,35,-79,-73,35,51,24,-127,85,-93, 
  /* [3][0][][] */ 117,89,-3,13,-127,-28,-50,-23,-26,-4,96,-95,-39,60,-25,-19, 
  /* [4][0][][] */ 1,-21,25,13,-22,35,-39,28,-54,-39,2,1,17,-127,63,6, 
  /* [5][0][][] */ 92,-35,3,-15,-26,-127,-19,12,-4,-2,-86,-2,-5,2,25,52, 
  /* [6][0][][] */ -51,-47,-18,35,-26,-24,-59,15,-127,-66,-68,-1,16,17,19,86, 
  /* [7][0][][] */ -38,-5,-127,50,54,-115,-36,42,19,-25,2,-13,2,18,-43,-3, 
  /* [8][0][][] */ 20,-41,-20,-3,23,31,-45,-56,-1,11,-60,23,-127,14,-9,12, 
  /* [9][0][][] */ 13,-96,53,127,-27,37,10,-57,104,-64,18,-15,-15,80,-89,59, 
  /* [10][0][][] */ -76,-127,30,-40,94,53,27,79,67,-117,-111,81,110,-71,-55,95, 
  /* [11][0][][] */ 50,-11,-127,43,59,39,-26,57,-9,-38,-21,17,-7,28,-22,-5, 
  /* [12][0][][] */ 77,-96,-89,-10,14,-71,-88,-58,46,-33,-119,-27,-127,10,-6,-6, 
  /* [13][0][][] */ 84,-77,21,-31,127,14,-30,-121,67,-5,3,12,9,8,51,2, 
  /* [14][0][][] */ -36,29,-82,-60,49,-127,45,-59,35,25,-1,-78,-7,76,30,22, 
  /* [15][0][][] */ 21,4,97,48,46,-34,-28,13,41,-61,-79,9,-127,-22,-48,75, 
  /* [16][0][][] */ -127,56,4,16,4,94,28,46,-15,22,106,-12,-15,-19,4,-20, 
  /* [17][0][][] */ -4,-5,-16,-26,-46,30,45,74,-15,127,-15,13,-2,60,70,-15, 
  /* [18][0][][] */ 11,123,-29,-42,-17,-5,65,-82,-8,127,-50,111,9,-67,62,-93, 
  /* [19][0][][] */ 4,-18,64,13,-13,41,4,30,17,-5,-47,-8,-127,16,3,35, 
  /* [20][0][][] */ 84,-85,-5,-90,-32,46,10,-60,-62,11,-127,-21,11,9,31,-6, 
  /* [21][0][][] */ 40,-21,127,52,-19,127,45,17,0,69,-76,9,-34,125,-43,16, 
  /* [22][0][][] */ 16,20,20,-1,-35,10,26,127,5,-7,20,23,4,16,25,37, 
  /* [23][0][][] */ -2,15,-65,10,7,-127,2,33,-1,-19,-16,-2,-79,5,11,41, 
  /* [24][0][][] */ 30,-47,5,-64,45,9,-27,-12,20,30,64,79,-33,70,127,33, 
  /* [25][0][][] */ -127,-87,-44,25,41,-9,27,-47,-30,45,-108,-5,16,28,73,37, 
  /* [26][0][][] */ 6,22,43,3,9,17,-35,65,-72,-49,-27,7,26,-127,21,-21, 
  /* [27][0][][] */ -92,38,-76,29,21,4,8,1,31,-30,127,19,-27,-12,7,-15, 
  /* [28][0][][] */ -23,6,31,44,7,8,28,66,30,-3,-12,2,-127,-8,5,27, 
  /* [29][0][][] */ -7,55,8,-34,54,0,26,-35,-127,23,-44,6,-2,37,-104,2, 
  /* [30][0][][] */ -3,2,-127,-14,29,-25,4,16,-23,3,-22,-14,-15,-41,-8,-4, 
  /* [31][0][][] */ 127,-25,-97,-18,20,-14,-36,49,-13,-13,-48,-53,1,-6,-44,25, 
  /* [32][0][][] */ -116,25,59,55,9,115,13,52,21,-9,127,26,-44,64,31,-4, 
  /* [33][0][][] */ -6,14,127,-9,-52,44,-6,-62,6,33,-15,38,-17,11,61,18, 
  /* [34][0][][] */ -25,-70,-36,-127,-8,-18,17,-43,-52,-63,-17,-111,-5,-4,87,55, 
  /* [35][0][][] */ -16,-37,45,50,53,-23,18,-17,-121,36,-12,23,-15,127,-73,-43, 
  /* [36][0][][] */ -79,19,-6,8,-17,41,42,84,-6,46,127,-11,-12,32,46,-26, 
  /* [37][0][][] */ -33,48,127,-14,-42,-39,29,-49,23,38,-39,1,8,-78,91,-33, 
  /* [38][0][][] */ 15,-31,-27,28,15,-27,-42,32,-23,7,109,-11,127,30,2,20, 
  /* [39][0][][] */ -26,-20,-73,-32,-56,-71,65,127,-16,24,11,-91,25,42,59,80, 
  /* [40][0][][] */ 68,-22,26,-2,-7,83,-30,-16,-4,-23,-5,0,127,6,-17,-15, 
  /* [41][0][][] */ -19,-12,-36,-127,5,11,-26,-61,-5,-29,30,-46,1,-22,-4,25, 
  /* [42][0][][] */ 75,19,43,124,-127,-1,-117,15,-79,-80,42,-46,6,124,-34,21, 
  /* [43][0][][] */ 4,117,-26,127,12,28,53,-92,-41,107,9,14,29,-49,62,38, 
  /* [44][0][][] */ -26,-23,-127,-23,51,81,-23,65,-45,-42,76,-14,13,-51,-52,4, 
  /* [45][0][][] */ 20,35,-5,-127,-42,30,49,-25,-19,33,-17,49,20,-115,86,-50, 
  /* [46][0][][] */ 6,40,45,-8,-2,24,-30,46,23,-30,-19,8,2,127,40,-16, 
  /* [47][0][][] */ 16,-45,11,-58,-55,8,-73,61,-28,-38,30,32,9,-127,60,23, 
  /* [48][0][][] */ 4,-1,23,-127,-9,-27,-13,2,7,-37,25,-7,-1,60,-4,77, 
  /* [49][0][][] */ 59,-13,40,127,78,21,1,55,-86,-3,21,54,-9,44,113,-16, 
  /* [50][0][][] */ -30,-15,73,17,-5,125,3,-65,57,-2,127,3,74,14,-25,-39, 
  /* [51][0][][] */ 23,47,34,42,10,33,-46,28,71,10,-2,127,28,55,27,-60, 
  /* [52][0][][] */ -15,51,127,10,7,-31,8,-32,-26,0,-7,41,8,81,-85,6, 
  /* [53][0][][] */ -28,-6,-41,-127,-35,17,15,-34,-8,9,29,-2,6,-35,48,16, 
  /* [54][0][][] */ 0,-7,-37,-26,25,4,-5,19,80,-11,-27,-27,-17,127,11,28, 
  /* [55][0][][] */ -35,-21,-37,0,-12,-26,-7,-127,20,-51,0,-4,-14,-60,-1,-17, 
  /* [56][0][][] */ 49,85,80,71,24,-16,-17,127,10,-52,24,-35,117,-23,-49,51, 
  /* [57][0][][] */ 115,6,127,-45,-77,-59,-28,-79,-8,-4,-77,-3,27,-79,35,-29, 
  /* [58][0][][] */ 58,61,28,61,-48,-11,-16,18,-12,29,127,-60,-56,-40,-39,-69, 
  /* [59][0][][] */ 127,-26,-8,6,-61,-20,20,12,-24,35,-126,-21,26,-14,7,18, 
  /* [60][0][][] */ -127,53,5,-24,-5,-16,26,31,-34,-8,97,3,-17,-4,38,-32, 
  /* [61][0][][] */ -109,27,11,21,24,31,-61,-57,127,-82,109,-21,71,-14,-82,-84, 
  /* [62][0][][] */ -14,0,-83,61,31,79,3,127,-2,-52,-42,40,-94,-1,-105,-14, 
  /* [63][0][][] */ -59,1,127,-39,-63,-53,39,-25,4,33,-13,8,3,-54,54,30, 
  /* [64][0][][] */ 45,35,-69,-2,38,-25,70,-114,-5,69,-16,-17,7,-127,-4,65, 
  /* [65][0][][] */ -9,35,54,-4,62,36,-18,-127,-68,-82,-49,-55,-11,-48,91,5, 
  /* [66][0][][] */ -127,-12,10,13,-20,13,31,-20,-60,-29,-91,62,44,29,31,62, 
  /* [67][0][][] */ -5,-85,44,115,-7,-4,-31,81,61,23,7,1,-1,-6,-127,-43, 
  /* [68][0][][] */ 21,0,-1,127,-50,-15,25,3,-59,29,-6,1,-7,-59,6,-25, 
  /* [69][0][][] */ 60,76,-9,127,39,23,69,-93,9,82,12,97,10,-30,7,-8, 
  /* [70][0][][] */ -29,-103,-1,-85,62,8,71,67,60,2,62,-74,43,101,42,127, 
  /* [71][0][][] */ 30,69,-9,87,51,-127,-42,93,52,-105,7,18,5,-53,-42,49, 
  /* [72][0][][] */ -127,-64,-47,36,4,24,-13,11,-71,-15,-84,36,73,-13,9,101, 
  /* [73][0][][] */ -22,-4,-10,91,26,4,-7,10,108,16,-33,-2,9,127,-100,-42, 
  /* [74][0][][] */ 71,-7,-16,-24,-23,-6,86,-21,-52,28,-93,59,-127,-36,66,39, 
  /* [75][0][][] */ -26,-23,-23,127,-13,9,6,-12,-53,32,-13,-19,8,-36,-19,-41, 
  /* [76][0][][] */ 15,-17,-28,48,34,1,-9,-127,17,-109,-21,-5,-21,-16,22,-35, 
  /* [77][0][][] */ 127,-42,53,47,-67,-2,-54,-4,84,10,1,32,37,19,-87,39, 
  /* [78][0][][] */ -60,-8,79,3,6,-13,-57,50,5,-45,-84,-4,37,127,23,31, 
  /* [79][0][][] */ -6,36,57,26,50,57,-52,-67,6,-61,92,-22,127,-31,-28,-46, 
  /* [80][0][][] */ -127,-53,-76,54,2,21,-8,0,-75,4,-119,-12,26,-49,-38,44, 
  /* [81][0][][] */ 76,-41,-65,84,127,101,-8,-25,47,-92,-16,-104,-10,30,-93,45, 
  /* [82][0][][] */ 127,116,-11,43,-127,-17,-79,12,-64,-7,114,-17,-58,103,-8,-44, 
  /* [83][0][][] */ 127,42,41,-21,11,-32,14,34,25,27,93,-42,-65,-31,-9,-88, 
  /* [84][0][][] */ 12,-13,-76,-30,2,17,-17,-127,-17,-30,43,-15,-1,-14,41,-8, 
  /* [85][0][][] */ -55,-34,-100,-71,-16,-26,119,127,-11,114,9,-61,1,117,125,-27, 
  /* [86][0][][] */ 79,-27,1,10,3,-46,5,-41,-7,-8,-127,11,18,8,-5,20, 
  /* [87][0][][] */ -13,33,36,-41,-4,82,-54,67,-15,-72,20,9,-16,-127,16,-26, 
  /* [88][0][][] */ -23,3,-56,-33,42,10,-41,-127,-17,-38,-13,12,-19,-56,28,-3, 
  /* [89][0][][] */ 47,-25,9,-127,31,-29,-70,100,68,-94,15,22,-6,13,19,32, 
  /* [90][0][][] */ -26,25,-40,72,41,-7,127,-117,85,118,-13,42,-7,50,32,-53, 
  /* [91][0][][] */ 30,-21,-58,12,22,-127,-24,-13,11,10,-63,-4,49,-27,18,-8, 
  /* [92][0][][] */ 48,15,117,92,62,37,17,80,-24,66,-105,-19,-4,127,-18,-15, 
  /* [93][0][][] */ 110,-58,-35,9,-34,-74,-10,18,-11,18,-127,-13,-20,23,-3,37, 
  /* [94][0][][] */ 14,-31,40,99,87,-19,5,50,14,1,-8,47,3,127,-37,-80, 
  /* [95][0][][] */ -108,32,22,66,25,55,36,15,17,13,127,7,-23,46,-23,-50, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00047535306657664478, 0.0010110863950103521, 0.00058938615256920457, 0.0027880785055458546, 0.0010282155126333237, 0.00061962316976860166, 0.00085234979633241892, 0.0018871313659474254, 0.0014554676599800587, 0.00037239782977849245, 0.00061824230942875147, 0.0013448388781398535, 0.0012441470753401518, 0.00064566143555566669, 0.00076679798075929284, 0.0010667950846254826, 0.00098560680635273457, 0.00057209830265492201, 0.00091890903422608972, 0.0016951349098235369, 0.0014967599418014288, 0.00030548454378731549, 0.0012564188800752163, 0.00071125832619145513, 0.00087314948905259371, 0.0012847726466134191, 0.00092582410434260964, 0.00072373595321550965, 0.0017925624269992113, 0.0013530448777601123, 0.00079001666745170951, 0.00068313628435134888, 0.00033032053033821285, 0.0015587647212669253, 0.00053580623352900147, 0.0018237647600471973, 0.00042949241469614208, 0.0012316206702962518, 0.002070524962618947, 0.00081967306323349476, 0.0019398953299969435, 0.00045227454393170774, 0.00054283509962260723, 0.00059124681865796447, 0.00077700614929199219, 0.00079194112913683057, 0.00057485385332256556, 0.00054956803796812892, 0.0010872218990698457, 0.00076238560723140836, 0.0012804751750081778, 0.0016018195310607553, 0.00062653765780851245, 0.0006968284142203629, 0.00090314942644909024, 0.00037023835466243327, 0.0011871038004755974, 0.00056672177743166685, 0.0013353832764551044, 0.0014552344800904393, 0.00047796510625630617, 0.00061729236040264368, 0.0010750384535640478, 0.0012447028420865536, 0.0004913845332339406, 0.00063755916198715568, 0.0012897197157144547, 0.00091781403170898557, 0.00071305554592981935, 0.00063439190853387117, 0.00079983752220869064, 0.0013218333479017019, 0.00093952339375391603, 0.00081822637002915144, 0.00061570748221129179, 0.0016109588323161006, 0.0004300416330806911, 0.0011561197461560369, 0.00036087963962927461, 0.0013470237608999014, 0.0010715950047597289, 0.0011841950472444296, 0.00063354842131957412, 0.0014246359933167696, 0.00065194466151297092, 0.00067882915027439594, 0.001025007339194417, 0.00087018456542864442, 0.00046521055628545582, 0.0014959650579839945, 0.00046834771637804806, 0.00164631730876863, 0.00026827395777218044, 0.00051959487609565258, 0.00084932002937421203, 0.00061008200282230973, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -31069, 2534, -1832, -9558, 62, -12208, -9519, -45763, -5646, 26846, 34017, -15954, -1766, -21927, 41474, -34681, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00077479577157646418, 0.00077832466922700405, 0.0011543356813490391, 0.00094163184985518456, 0.00094716507010161877, 0.00082138215657323599, 0.001061969087459147, 0.00048748074914328754, 0.00048384556430391967, 0.00058406038442626595, 0.00081997219240292907, 0.00062420638278126717, 0.00104103097692132, 0.0011144981253892183, 0.00059273542137816548, 0.00051945308223366737, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -16,-6,-23,5,16,-10,9,98,-52,16,34,-7,24,-24,-6,9,25,-18,-5,-11,63,-9,19,127,-13,75,-3,-19,30,-16,23,-31,-16,53,21,-39,13,42,11,-15,-93,-32,21,46,34,31,-114,-34, 
  /* [1][0][][] */ -32,-13,12,7,-42,11,3,60,-64,-38,-6,-51,-30,-10,6,-12,-20,110,-13,9,-2,3,-24,-16,28,-25,10,25,-32,-93,-44,15,-31,-26,33,-2,6,-41,1,27,-21,-26,127,5,13,-3,7,-8, 
  /* [2][0][][] */ -22,-17,-20,-37,-5,-69,2,-22,0,9,-1,21,6,4,-16,7,-4,-27,-26,-18,-10,3,-4,-127,-9,77,-16,10,2,-25,2,-13,-14,52,17,1,25,8,32,-5,-40,13,-21,-7,-8,-13,11,-2, 
  /* [3][0][][] */ -5,30,7,-29,-4,1,3,-3,-21,-2,4,40,-127,16,-4,-7,-2,6,-15,-1,-27,8,7,17,-12,-5,1,27,-8,19,6,13,5,0,14,16,-12,23,40,12,10,8,24,-35,4,-9,5,14, 
  /* [4][0][][] */ 41,-30,11,8,21,32,18,-22,-30,8,-7,-23,7,21,-3,16,11,3,-78,7,-9,15,13,74,5,-28,7,51,12,-72,19,2,17,-36,24,-127,10,38,-2,23,-16,26,7,-23,-8,-19,2,7, 
  /* [5][0][][] */ 26,4,-20,58,0,-4,2,31,-2,2,50,9,2,63,-6,-6,-27,24,29,1,8,8,7,-28,-1,-44,0,-16,-3,-6,8,6,67,-127,1,29,-13,-14,22,4,-92,62,17,-11,-8,-8,-98,-16, 
  /* [6][0][][] */ 27,0,13,8,-9,-7,9,-17,2,0,-2,8,-17,0,11,3,1,-7,127,14,4,9,17,-31,6,-4,26,-14,-9,0,-5,8,-2,-9,29,-35,-3,-33,63,10,1,-8,-3,14,-7,5,8,-8, 
  /* [7][0][][] */ -45,-5,-10,27,-15,90,-16,45,-1,38,9,127,73,6,-6,-3,-3,-18,-9,-22,-26,-4,-25,61,0,-34,-52,-20,-15,-8,-9,-15,10,-1,-27,0,7,-59,111,-4,14,37,-62,-72,12,-13,7,-4, 
  /* [8][0][][] */ -60,-41,1,2,-16,12,0,35,-9,-71,16,44,39,6,1,12,-5,62,-30,11,-51,26,-11,-22,-1,7,14,54,-12,127,-7,27,-3,12,-16,-126,-107,64,45,24,16,7,115,-32,5,33,21,24, 
  /* [9][0][][] */ -36,-9,-7,30,6,-32,1,5,66,-41,18,65,-61,4,20,-7,-10,16,-41,-34,43,7,-10,-28,-9,9,42,-22,13,14,9,-8,-3,3,72,-111,-17,-127,-95,5,-41,30,42,8,-5,12,-1,-55, 
  /* [10][0][][] */ -19,-8,-36,-127,45,84,9,-15,-8,27,19,6,48,-48,-34,22,34,-44,55,-23,35,-20,32,52,-55,-102,5,-34,48,32,51,-31,-30,-72,29,-1,19,-42,4,-33,-29,-67,-10,11,21,16,17,-39, 
  /* [11][0][][] */ 5,67,-13,63,35,-69,-87,-21,0,69,-1,-4,-3,79,-8,-89,22,41,16,-8,-54,-108,17,5,25,-31,18,-21,52,-46,28,-89,45,-12,-34,-93,113,16,5,-127,0,68,110,-77,-11,-55,31,32, 
  /* [12][0][][] */ 127,-11,-36,12,4,21,5,103,22,-5,-54,-22,-4,10,-14,-12,-8,0,-15,2,2,4,7,17,-10,17,-4,4,-7,12,2,8,16,-76,-5,18,-13,-20,-33,-6,-16,-80,3,-122,-43,-11,80,-4, 
  /* [13][0][][] */ 4,3,3,6,4,-11,2,1,2,6,6,24,-8,7,5,0,4,1,9,2,12,-10,5,-4,2,2,18,127,14,2,7,-1,6,3,-36,20,4,-8,9,-16,-15,-3,1,1,-7,0,-7,-18, 
  /* [14][0][][] */ 56,-29,43,-62,60,23,44,-101,-53,-64,-10,127,-74,12,74,15,59,19,-58,61,16,5,64,-20,25,65,-41,-127,13,-43,56,65,-12,73,-122,-44,-36,45,89,-10,-45,-3,55,3,-2,6,15,-22, 
  /* [15][0][][] */ -2,-62,-74,-38,60,22,79,-56,-1,10,-30,-46,76,-4,-94,66,71,47,79,-87,-107,-37,48,-14,-80,36,29,50,45,33,55,-48,10,69,97,127,-17,-100,-13,-38,88,52,112,-45,-8,-19,-21,68, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.032928820699453354, 0.033078797161579132, 0.049059264361858368, 0.040019351989030838, 0.040254514664411545, 0.03490874171257019, 0.045133687555789948, 0.020717931911349297, 0.020563436672091484, 0.024822566658258438, 0.034848816692829132, 0.026528771966695786, 0.044243816286325455, 0.047366168349981308, 0.025191254913806915, 0.02207675576210022, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 5168, 40179, -906, 35703, 4050, 122454, -2250, 49014, 1505, 32162, 24056, 155, 2473, 29355, -1791, -1436, -510, -2347, 649, -2490, 135, -3756, -1312, -19568, -4411, 46217, 124042, 108296, 1908, 10056, -999, 59, 23937, 447, 46048, 1040, 71683, 4519, 60654, 2029, 1614, 62301, -195, 3759, 54347, -1022, 3792, 52918, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.6238142608199269e-05, 3.8543061236850917e-05, 0.00017035994096659124, 5.9865069488296285e-05, 0.00017198926070705056, 7.1615497290622443e-05, 0.00016919600602705032, 0.00011586141772568226, 8.4605002484750003e-05, 3.9422935515176505e-05, 4.6633082092739642e-05, 9.927573410095647e-05, 3.9187383663374931e-05, 3.7942427297821268e-05, 0.00015436737157870084, 0.00021260134235490113, 0.00020314578432589769, 8.2510508946143091e-05, 0.0001417974999640137, 0.00013156086788512766, 0.00010186641884502023, 0.00016053691797424108, 0.00011627973435679451, 0.00012273809988982975, 0.0001021880452753976, 9.7162090241909027e-05, 2.2148034986457787e-05, 6.2414066633209586e-05, 0.00014772724534850568, 7.6190262916497886e-05, 0.00012138662714278325, 0.00012605411757249385, 4.7477115003857762e-05, 0.00014140644634608179, 2.7452771973912604e-05, 5.305039303493686e-05, 8.0803445598576218e-05, 7.7724151196889579e-05, 9.4929950137156993e-05, 8.8319175119977444e-05, 0.00010186708095716313, 9.2818285338580608e-05, 7.6847965829074383e-05, 7.8900819062255323e-05, 3.0467128453892656e-05, 0.00018010340863838792, 8.6041094618849456e-05, 3.1757663236930966e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 71,-95,99,69,55,-33,107,-66,61,-89,-79,49,53,-39,-70,-89,101,79,51,80,68,-72,-84,53,-30,-43,-62,-66,-66,60,-63,-116,-18,42,70,64,-66,52,-52,-23,49,-76,61,61,-94,13,79,-37, 83,-93,127,86,-78,-68,-56,-85,100,-104,-61,75,79,-109,-94,94,-37,101,83,127,83,-114,53,74,-50,-77,-66,-81,54,80,-30,-127,-87,79,81,83,-83,82,-85,-14,78,-98,85,90,-70,-127,96,-101, 36,-45,72,39,19,-41,-48,-40,42,-31,4,35,29,-84,-54,1,-53,39,36,68,33,-53,33,27,-27,-47,-43,-22,32,31,88,-91,-84,43,37,36,-32,36,-41,-8,40,-44,36,47,-5,-7,37,-75, 
  /* [0][1][][] */ 91,-109,-43,96,57,-82,127,-89,90,-116,-70,82,85,-109,-13,-127,127,108,75,-36,83,108,-127,74,75,-78,-94,-99,-127,87,-71,-10,-88,74,108,96,-86,80,-80,88,85,-100,90,92,-91,110,95,-93, 127,-127,-65,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-22,98,-63,127,127,-49,127,127,71,127,127,-127,-127,-127,53,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 63,-76,-36,67,39,-62,-48,-61,59,-43,-59,59,48,-56,-16,12,-63,50,58,-27,59,65,52,65,65,-65,-63,-46,39,54,127,15,-62,69,49,49,-48,60,-60,58,61,-59,54,63,-64,-67,62,-56, 
  /* [0][2][][] */ 47,-51,-48,47,29,-55,62,-42,42,-73,-5,41,57,-79,83,-80,74,50,36,-31,29,-9,-78,29,-25,-42,-51,-49,-73,32,-43,92,-72,39,48,42,-28,39,-46,-89,48,-54,42,49,-22,20,39,-74, 74,-79,-48,79,-57,-66,-72,-67,52,-77,-64,64,77,-49,127,32,-45,59,64,-45,55,-17,42,67,-48,-65,-78,-61,32,61,-24,119,-53,67,58,57,-51,62,-70,-108,69,-68,60,65,-86,52,63,-56, 44,-40,-28,46,29,-22,-15,-35,15,-23,-52,30,31,6,67,24,-33,21,30,-36,31,0,41,41,-25,-31,-47,-25,34,34,61,70,3,35,16,23,-23,30,-34,-55,30,-34,25,34,-64,10,31,-5, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028151208534836769, 0.0016380801098421216, 0.0072402972728013992, 0.0025442654732614756, 0.0073095434345304966, 0.0030436585657298565, 0.0071908300742506981, 0.0049241101369261742, 0.0035957125946879387, 0.0016754746902734041, 0.0019819058943539858, 0.004219218622893095, 0.0016654637875035405, 0.0016125531401485205, 0.0065606134012341499, 0.0090355565771460533, 0.0086336955428123474, 0.0035066965501755476, 0.0060263937339186668, 0.0055913366377353668, 0.004329322837293148, 0.0068228188902139664, 0.0049418886192142963, 0.0052163694053888321, 0.0043429918587207794, 0.0041293888352811337, 0.0009412914514541626, 0.0026525978464633226, 0.0062784077599644661, 0.0032380861230194569, 0.0051589314825832844, 0.0053572999313473701, 0.0020177774131298065, 0.0060097738169133663, 0.0011667427606880665, 0.0022546416148543358, 0.0034341462887823582, 0.0033032763749361038, 0.0040345229208469391, 0.0037535647861659527, 0.0043293507769703865, 0.0039447769522666931, 0.0032660386059433222, 0.0033532846719026566, 0.0012948529329150915, 0.0076543949544429779, 0.0036567463539540768, 0.0013497006148099899, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 492, 617, 1985, 546, 7359, 12950, 2096, -201, -542, -517, 1099, 1266, 2514, 832, 18199, 2438, 1366, -669, -296, 2409, -1453, 8954, 7319, 7708, 4438, 238, 3443, 4385, 7382, -493, 6724, 4609, 378, -180, 3575, 3060, -1510, 221, -466, 4675, 855, -536, -597, 103, 848, 2703, 508, 917, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00050886010285466909, 0.0012499192962422967, 0.00029746699146926403, 0.00033247360261157155, 0.00030037964461371303, 0.00031565362587571144, 0.00051289540715515614, 0.00029257484129630029, 0.00047918892232701182, 0.00096941698575392365, 0.00095192634034901857, 0.00031575607135891914, 0.00048862595576792955, 0.00092712766490876675, 0.00019704709120560437, 0.00049876736011356115, 0.00034283523564226925, 0.00050881959032267332, 0.0002711546840146184, 0.0003858465061057359, 0.00040411320514976978, 0.00028256920631974936, 0.00050472584553062916, 0.00019721363787539303, 0.00037377627450041473, 0.00036212473060004413, 0.0020270457025617361, 0.00043066008947789669, 0.00023779639741405845, 0.00048209581291303039, 0.00037689905730076134, 0.00025259156245738268, 0.00087003456428647041, 0.00031832352397032082, 0.0010142507962882519, 0.00060140341520309448, 0.00088692863937467337, 0.00048300810158252716, 0.00025858907611109316, 0.00041194475488737226, 0.0001978478831006214, 0.00032636206015013158, 0.0004661034035962075, 0.00031506863888353109, 0.0022958971094340086, 0.00050042069051414728, 0.00040252957842312753, 0.0013071286957710981, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,-3,59,-43,34,31,-32, 
  /* [1][0][][] */ 18,46,22,14,4,-21,84,127, 
  /* [2][0][][] */ -24,-4,8,6,-127,-28,21,6, 
  /* [3][0][][] */ 118,0,-5,-126,-127,23,34,-34, 
  /* [4][0][][] */ -127,41,-16,-3,76,-3,47,15, 
  /* [5][0][][] */ -90,-20,17,-19,-127,15,9,82, 
  /* [6][0][][] */ -19,-127,18,-9,-9,2,15,46, 
  /* [7][0][][] */ -71,0,16,96,127,-25,-38,0, 
  /* [8][0][][] */ 75,6,12,-127,10,-6,-49,-40, 
  /* [9][0][][] */ -3,-127,-8,-18,0,98,-42,79, 
  /* [10][0][][] */ -119,-28,-9,31,-127,97,71,4, 
  /* [11][0][][] */ 127,14,25,24,-63,-32,-48,-120, 
  /* [12][0][][] */ -8,12,32,0,10,-90,127,72, 
  /* [13][0][][] */ 61,-41,-12,-30,127,110,115,-22, 
  /* [14][0][][] */ 127,42,-13,24,-70,5,-36,-16, 
  /* [15][0][][] */ -13,-127,12,-7,6,2,5,42, 
  /* [16][0][][] */ -56,-24,-1,-9,-127,-3,4,9, 
  /* [17][0][][] */ -11,103,-111,-10,6,-127,87,-98, 
  /* [18][0][][] */ 127,-35,-44,16,-78,29,7,114, 
  /* [19][0][][] */ 127,-44,-39,-5,46,-6,41,9, 
  /* [20][0][][] */ 127,35,-7,102,7,35,-6,-70, 
  /* [21][0][][] */ 2,41,-60,-4,4,105,-127,-87, 
  /* [22][0][][] */ -127,32,27,-25,-47,-8,-41,-13, 
  /* [23][0][][] */ -46,-60,10,32,-127,50,86,-6, 
  /* [24][0][][] */ 127,-20,-3,-3,-68,-4,-9,8, 
  /* [25][0][][] */ 26,-14,6,-21,127,48,58,-34, 
  /* [26][0][][] */ 12,-85,9,-16,0,-127,72,-57, 
  /* [27][0][][] */ -20,-127,26,-17,-2,-54,38,-7, 
  /* [28][0][][] */ -127,48,-20,0,-11,-12,120,104, 
  /* [29][0][][] */ -6,50,6,9,2,46,-127,-126, 
  /* [30][0][][] */ 127,-21,-8,-11,-71,-7,-64,-29, 
  /* [31][0][][] */ -26,-48,62,-4,5,-108,127,74, 
  /* [32][0][][] */ -91,10,1,17,-127,-83,-88,67, 
  /* [33][0][][] */ -25,7,6,16,-127,-55,-45,26, 
  /* [34][0][][] */ -2,-127,60,-10,0,98,-58,59, 
  /* [35][0][][] */ -28,-51,-127,-8,-2,-70,41,-52, 
  /* [36][0][][] */ 5,127,60,17,-14,8,-34,-41, 
  /* [37][0][][] */ -127,29,29,-10,51,-32,-1,-87, 
  /* [38][0][][] */ -127,-19,-57,-23,61,31,36,121, 
  /* [39][0][][] */ 5,-48,64,-4,21,-98,127,86, 
  /* [40][0][][] */ -47,-30,-16,-48,-125,127,118,-28, 
  /* [41][0][][] */ -127,30,2,-75,-75,-75,-81,47, 
  /* [42][0][][] */ -54,-127,-103,-2,6,55,-109,-55, 
  /* [43][0][][] */ -72,4,-1,-127,110,66,57,2, 
  /* [44][0][][] */ 127,3,22,-110,31,-42,-10,35, 
  /* [45][0][][] */ -30,-127,17,-22,8,-43,70,-3, 
  /* [46][0][][] */ 123,-11,-9,-34,127,-35,-24,10, 
  /* [47][0][][] */ 127,0,7,115,-9,35,19,-58, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00074273359496146441, 0.0018243854865431786, 0.00043418363202363253, 0.00048527936451137066, 0.00043843491584993899, 0.0004607288574334234, 0.00074862351175397635, 0.00042704303632490337, 0.00069942540721967816, 0.0014149636263027787, 0.0013894342118874192, 0.0004608783929143101, 0.000713199726305902, 0.0013532380107790232, 0.00028761045541614294, 0.00072800216730684042, 0.00050040322821587324, 0.00074267445597797632, 0.0003957781009376049, 0.00056318257702514529, 0.00058984471252188087, 0.00041243876330554485, 0.00073669920675456524, 0.00028785355971194804, 0.00054556486429646611, 0.00052855821559205651, 0.0029586814343929291, 0.0006285926210694015, 0.00034708826569840312, 0.00070366833824664354, 0.00055012287339195609, 0.00036868330789729953, 0.0012699047802016139, 0.00046462586033158004, 0.0014804031234234571, 0.00087781006004661322, 0.0012945634080097079, 0.00070499989669770002, 0.00037743730354122818, 0.00060127564938738942, 0.00028877929435111582, 0.00047635895316489041, 0.00068032578565180302, 0.00045987500925548375, 0.0033510976936668158, 0.00073041539872065187, 0.00058753322809934616, 0.0019078884506598115, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -34630, 24610, -10756, -15979, 22943, 7085, 24916, 43876, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00044576320215128362, 0.0007324910257011652, 0.0015399191761389375, 0.0016447458183392882, 0.00074143242090940475, 0.00061920884763821959, 0.00063228106591850519, 0.00094939139671623707, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -53,-19,-25,-3,6,-35,0,6,-92,123,-48,127,101,2,75,-23,-10,-34,5,3,-23,-5,-12,-28,21,-104,11,48,-30,37,19,-36,-14,-70,111,-11,-1,-7,-3,-12,80,16,41,-31,-35,25,-23,-18, 
  /* [1][0][][] */ -1,31,127,-4,-9,-19,2,-65,35,6,11,14,-33,6,8,-123,6,-66,6,-1,-37,17,26,-33,-17,-16,14,5,-1,-1,11,-21,0,13,18,-2,-15,-48,70,-39,-2,56,-12,17,-20,4,23,-15, 
  /* [2][0][][] */ 11,-46,13,-38,26,25,-10,-28,0,0,-3,14,-9,51,2,-4,-35,127,-23,-26,-19,23,-43,-1,119,-4,0,-10,-27,-17,8,-40,-9,-6,-2,3,-10,-4,-16,2,16,-18,-14,-1,5,21,-22,-43, 
  /* [3][0][][] */ 1,-83,1,5,7,2,-3,-5,-15,-3,11,28,15,-13,57,0,-6,-17,4,23,-11,22,-26,3,9,53,-2,7,-14,6,127,1,3,6,1,-2,-13,-17,-3,3,-11,9,4,25,-8,-8,6,27, 
  /* [4][0][][] */ -103,11,13,3,-1,-42,2,5,45,-37,21,-15,-32,-1,-18,-14,-9,7,-2,26,4,-23,16,0,-9,39,-2,107,-7,5,0,-30,3,-127,-29,0,-3,1,3,1,-61,11,-17,13,-59,16,2,-2, 
  /* [5][0][][] */ -11,21,14,11,-50,-16,-4,43,20,-6,11,1,-5,-39,0,27,4,-80,20,15,59,-46,-7,52,14,12,-72,-37,-55,-18,16,-14,-10,-84,9,-65,85,-9,-37,4,8,-35,0,4,127,-4,-41,-13, 
  /* [6][0][][] */ -23,-22,-14,8,30,-42,6,-37,-25,3,49,-17,-11,37,-4,-53,-7,15,12,-20,-43,68,-17,-77,0,-8,-46,-75,34,42,-15,11,-3,-62,-16,89,-80,-37,2,-68,1,8,17,47,127,-27,49,12, 
  /* [7][0][][] */ 15,34,-78,32,-12,27,-2,61,1,-9,73,-35,11,-27,-16,-2,-2,-127,36,-44,66,44,23,-63,25,-18,12,-2,-15,35,-19,15,-1,36,3,-19,-7,-55,-41,-65,-9,-37,39,68,-25,-17,-4,9, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018944935873150826, 0.031130868941545486, 0.065446563065052032, 0.069901697337627411, 0.031510878354310989, 0.026316376402974129, 0.026871943846344948, 0.040349133312702179, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52166, -860, 8427, 245, 6042, -2899, 2300, 25862, 1611, 39470, -1319, 24660, -6078, -1173, 25831, 9845, 302, 16949, 36455, 10428, 11, -498, 216, 16144, -8278, 25641, 44865, 35841, 4318, 1993, -1179, 729, 1617, 17137, -6712, 15048, -11135, 14431, -23045, 129854, 26321, 20572, 13386, -1600, 13153, 4693, 2043, -274, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031947498791851103, 0.00023576273815706372, 0.00018838202231563628, 0.00021587923401966691, 9.7902353445533663e-05, 0.00010273925727233291, 0.00054215820273384452, 0.00013451841368805617, 0.00011683354387059808, 0.00012757122749462724, 9.1059926489833742e-05, 0.00017738013411872089, 0.00029848236590623856, 0.00017712448607198894, 9.8092124972026795e-05, 0.00015747289580758661, 0.00018617942987475544, 0.00023222585150506347, 6.3445339037571102e-05, 0.00015229779819492251, 0.00022379770234692842, 0.00021842867136001587, 0.00020471426250878721, 0.00012944736226927489, 0.00019422106561250985, 0.00014665740309283137, 0.00063958315877243876, 9.0602683485485613e-05, 0.00018088141223415732, 0.00044692869414575398, 0.00010692301293602213, 0.00018241610086988658, 0.00053945602849125862, 0.00017072427726816386, 0.0001592813350725919, 0.00015336285287048668, 0.00034489488461986184, 0.00017021245730575174, 0.00024544834741391242, 1.9811568563454784e-05, 0.00012229090498294681, 5.125667667016387e-05, 0.00012505984341260046, 0.00013535765174310654, 0.00016803019389044493, 9.9049364507663995e-05, 0.00017538992688059807, 9.1624497144948691e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,19,108,3,80,-2,28,17,7,10,9,-10,-9,-44,7,-2,8,-21,-111,-8,-24,127,-9,-3,6,-5,9,-6,4,15,99,19,28,40,-26,1,33,-2,1,17,-68,-8,-9,17,1,-8,-10, 127,10,14,-127,28,86,10,10,125,127,6,43,-52,-25,5,7,127,-56,-58,-54,-101,23,-110,15,17,67,-31,-83,22,20,11,-123,5,-62,127,10,-40,-48,-7,116,-78,-96,-30,3,-33,-11,-127,23, -33,-3,7,14,-1,64,4,17,30,7,-15,31,-16,-3,17,2,-104,29,-1,80,-32,-12,-18,-5,-5,-58,-3,30,-18,4,3,-22,8,-25,16,-18,0,46,43,-12,50,37,-15,12,-40,0,-3,-6, 
  /* [0][1][][] */ 126,8,0,-97,13,-28,34,-16,10,7,-13,53,-7,0,16,-33,0,-50,-58,-84,10,-71,-124,-17,6,94,-15,-127,-10,31,12,-107,16,-52,-5,127,-2,57,-42,39,-61,-127,39,-89,-42,-17,-15,-5, 27,-127,-127,113,-127,-127,-127,-127,-127,-99,127,-127,127,127,33,-127,-84,127,127,-107,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-32,-40,127,-127,127,127,127,-80,127,127,127,-125,100,107, 53,5,48,-14,6,-62,42,18,-23,13,-107,-9,-1,-40,127,3,63,-66,-69,85,14,-43,12,-31,1,5,-38,70,19,38,0,3,33,-45,7,67,-4,63,71,-11,-80,8,-84,-32,29,-19,-11,6, 
  /* [0][2][][] */ -52,-5,25,-16,6,32,-38,22,8,-27,12,32,6,-6,-41,18,4,22,-13,107,6,-30,-16,-11,-3,19,0,51,-10,2,48,-31,-20,-43,-35,-37,-1,30,10,-23,10,-6,41,-38,-34,16,-11,19, 70,127,75,20,15,-23,121,35,18,-5,43,25,-5,-1,-92,25,-59,-56,-36,123,-38,49,12,20,33,-63,-40,29,76,0,127,22,84,-26,6,-34,-26,-17,-12,119,-27,-15,-41,44,21,-34,6,-127, -42,-4,6,-4,5,-8,-62,8,-18,-13,-42,-41,20,-9,-10,10,33,24,-7,-127,23,-9,6,-8,-7,8,-10,-54,-16,7,7,9,-20,87,-38,-22,-5,37,27,-62,5,6,-37,6,-41,127,-7,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013577686622738838, 0.010019916109740734, 0.0080062355846166611, 0.0091748675331473351, 0.0041608498431742191, 0.0043664183467626572, 0.023041723296046257, 0.0057170325890183449, 0.004965425468981266, 0.005421777255833149, 0.0038700466975569725, 0.0075386553071439266, 0.012685500085353851, 0.0075277904979884624, 0.0041689150966703892, 0.0066925976425409317, 0.0079126255586743355, 0.0098695987835526466, 0.0026964268181473017, 0.0064726565033197403, 0.0095114018768072128, 0.0092832185328006744, 0.0087003558874130249, 0.0055015129037201405, 0.0082543948665261269, 0.0062329396605491638, 0.027182284742593765, 0.0038506139535456896, 0.0076874601654708385, 0.018994469195604324, 0.0045442278496921062, 0.0077526839450001717, 0.022926881909370422, 0.0072557819075882435, 0.0067694569006562233, 0.0065179211087524891, 0.014658032916486263, 0.0072340294718742371, 0.010431554168462753, 0.00084199162665754557, 0.0051973634399473667, 0.0021784086711704731, 0.005315043032169342, 0.0057527003809809685, 0.0071412832476198673, 0.0042095980606973171, 0.0074540716595947742, 0.003894041059538722, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 46836, 6188, 5852, 5921, 1267, 7224, -1497, -257, 752, 1824, 2747, 225, 1986, -828, 552, -1752, 4050, 11269, -217, 25339, 4922, 2162, 9245, -428, 3499, 4718, 20484, 7146, -52, -2316, 206, 1533, -1653, 7299, 2193, 5028, 6805, 3425, 17039, 1473, -992, 1996, 923, 2793, 4613, 2372, -1230, 2240, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 9.1939211415592581e-05, 0.00036842658300884068, 0.00027311168378219008, 0.00055645743850618601, 0.0017450615996494889, 0.00068556366022676229, 0.0012659337371587753, 0.0013499073684215546, 0.00074337038677185774, 0.00077503756619989872, 0.00081298284931108356, 0.00057357095647603273, 0.00052283756667748094, 0.00057068868773058057, 0.00071856315480545163, 0.0020487057045102119, 0.00039840667159296572, 0.00037758535472676158, 0.0021602350752800703, 0.00010586602729745209, 0.00025136754265986383, 0.00046642744564451277, 0.00043331677443347871, 0.0011876350035890937, 0.00036077489494346082, 0.00025370490038767457, 0.00019543408416211605, 0.00050830969121307135, 0.00092061201576143503, 0.00112774723675102, 0.00063777767354622483, 0.00052966602379456162, 0.0011860289378091693, 0.00030009268084540963, 0.0004693020018748939, 0.00036556157283484936, 0.000536069564986974, 0.00039236876182258129, 0.00013679685071110725, 0.0030971639789640903, 0.00061648566043004394, 0.0013792240060865879, 0.00049464759649708867, 0.00054144189925864339, 0.00027856737142428756, 0.00048421393148601055, 0.00093506870325654745, 0.0011617760173976421, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 64,31,6,6,127,52,-52,-30, 
  /* [1][0][][] */ -7,-9,2,127,9,-8,3,15, 
  /* [2][0][][] */ 48,-127,-25,53,-20,-76,72,-5, 
  /* [3][0][][] */ 127,-12,7,9,-14,-48,22,18, 
  /* [4][0][][] */ 6,-53,127,-3,-4,-50,23,-85, 
  /* [5][0][][] */ 62,-5,4,-8,127,-6,2,13, 
  /* [6][0][][] */ 2,81,-17,127,29,51,-70,-42, 
  /* [7][0][][] */ 0,127,-2,2,2,-4,10,-6, 
  /* [8][0][][] */ 127,27,-16,10,-57,-30,-2,-18, 
  /* [9][0][][] */ -127,23,-4,13,32,2,-8,-12, 
  /* [10][0][][] */ -75,-17,11,127,34,7,-37,10, 
  /* [11][0][][] */ -127,17,12,-80,39,17,-35,-67, 
  /* [12][0][][] */ 127,43,9,13,-38,-1,-12,-59, 
  /* [13][0][][] */ -11,84,-127,-22,31,103,-59,78, 
  /* [14][0][][] */ -54,-17,-12,127,16,29,-5,-31, 
  /* [15][0][][] */ 2,127,0,1,-4,-13,5,-61, 
  /* [16][0][][] */ -32,-120,-23,3,0,-93,127,-46, 
  /* [17][0][][] */ 12,127,10,-10,8,84,-99,-19, 
  /* [18][0][][] */ -8,48,-127,-5,11,53,-39,55, 
  /* [19][0][][] */ -127,-5,-8,-19,-101,-12,40,70, 
  /* [20][0][][] */ -127,-88,-10,14,51,-46,24,32, 
  /* [21][0][][] */ -37,-4,0,8,-127,11,2,-5, 
  /* [22][0][][] */ -127,-74,-15,-9,82,-1,70,64, 
  /* [23][0][][] */ -11,-15,1,-11,6,81,-127,-91, 
  /* [24][0][][] */ -5,44,-127,0,16,54,-11,78, 
  /* [25][0][][] */ 127,-69,-23,127,-69,-14,8,-43, 
  /* [26][0][][] */ 6,-18,1,-1,-9,127,122,-33, 
  /* [27][0][][] */ 46,-17,-14,12,127,27,42,-11, 
  /* [28][0][][] */ 16,127,-57,-13,11,87,-32,118, 
  /* [29][0][][] */ -1,16,0,-16,-5,93,-127,-90, 
  /* [30][0][][] */ 0,-3,3,-127,-11,-3,-7,-11, 
  /* [31][0][][] */ -44,7,7,-4,-127,18,0,-7, 
  /* [32][0][][] */ -24,35,-4,-127,-25,11,-85,-91, 
  /* [33][0][][] */ -53,-11,-2,-1,-127,34,34,9, 
  /* [34][0][][] */ -127,60,9,12,60,5,-6,17, 
  /* [35][0][][] */ -20,97,-47,-17,-3,-127,76,-20, 
  /* [36][0][][] */ 6,55,11,-11,-1,113,-127,-38, 
  /* [37][0][][] */ 45,-63,-17,24,13,-127,104,-20, 
  /* [38][0][][] */ -7,-127,-8,-3,36,9,-49,69, 
  /* [39][0][][] */ 2,-127,-10,-9,-1,-11,-65,-100, 
  /* [40][0][][] */ 112,61,9,-5,-49,96,-125,-127, 
  /* [41][0][][] */ -2,-113,7,-1,5,52,-21,127, 
  /* [42][0][][] */ 63,-19,-14,-127,-57,-27,1,-27, 
  /* [43][0][][] */ -65,-34,-2,-127,32,13,-1,9, 
  /* [44][0][][] */ 17,-17,-11,9,-22,72,127,-20, 
  /* [45][0][][] */ -127,-47,10,26,12,3,18,-8, 
  /* [46][0][][] */ 5,100,127,-12,14,15,16,25, 
  /* [47][0][][] */ -8,18,18,127,-2,11,1,-13, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00018561202159617096, 0.00074380019214004278, 0.00055137317394837737, 0.0011234073899686337, 0.003523027990013361, 0.0013840543106198311, 0.0025557379703968763, 0.0027252684812992811, 0.0015007577603682876, 0.0015646892134100199, 0.0016412952682003379, 0.0011579571291804314, 0.0010555337648838758, 0.0011521382257342339, 0.0014506755396723747, 0.0041360417380928993, 0.00080432568211108446, 0.00076229043770581484, 0.0043612034060060978, 0.00021372825722210109, 0.0005074748769402504, 0.00094164983602240682, 0.00087480415822938085, 0.0023976641241461039, 0.00072835257742553949, 0.00051219365559518337, 0.00039455326623283327, 0.0010262040887027979, 0.0018585830694064498, 0.0022767591290175915, 0.0012875812826678157, 0.0010693194344639778, 0.0023944214917719364, 0.00060584390303120017, 0.00094745313981547952, 0.00073801615508273244, 0.0010822472395375371, 0.00079213600838556886, 0.00027617314481176436, 0.0062527279369533062, 0.0012445957399904728, 0.0027844547294080257, 0.00099862227216362953, 0.0010930931894108653, 0.00056238740216940641, 0.00097755820024758577, 0.0018877690890803933, 0.0023454583715647459, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -8384, -25744, 27388, 19726, 4885, 1561, 35914, 11349, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011502921115607023, 0.00064420903800055385, 0.0014333004364743829, 0.0011850077426061034, 0.0011192080564796925, 0.0011638655560091138, 0.00086757051758468151, 0.00072365935193374753, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,5,10,-97,10,28,4,10,-6,10,-1,-10,101,0,2,6,0,-9,-7,-2,82,-5,6,5,29,44,11,13,0,10,6,-127,9,13,-2,-1,-26,-1,-13,28,4,-26,-9,2,2,2,2,1, 
  /* [1][0][][] */ -35,-6,-2,-11,41,25,-31,75,14,11,-28,-26,15,0,17,31,0,28,16,-53,4,12,127,20,-31,1,56,12,16,0,16,-9,18,-2,-14,-28,11,-62,14,5,-1,-7,-90,-1,-37,13,-52,-94, 
  /* [2][0][][] */ -67,24,-4,14,55,-9,33,27,-3,55,10,2,4,0,10,59,0,9,-127,24,3,19,7,-18,-33,-5,44,4,19,33,32,6,5,-3,-13,-12,12,11,-2,-7,40,0,-32,-7,27,-67,24,16, 
  /* [3][0][][] */ 8,7,1,9,-2,32,0,-2,67,18,1,0,27,0,-27,-6,0,-5,-6,1,-5,2,5,-17,-9,-9,-9,0,-8,-9,-7,-6,-49,42,-56,-1,1,-1,0,-127,5,5,0,-48,-4,-3,1,9, 
  /* [4][0][][] */ -3,-1,80,37,7,-23,-2,-3,1,-1,-1,-6,-81,0,-13,4,0,4,9,0,66,-1,3,-6,-15,23,-3,44,-4,-4,-4,97,6,9,6,-7,6,-12,-17,-19,-2,-127,6,-2,0,-4,-4,-1, 
  /* [5][0][][] */ -12,46,9,-6,3,50,23,17,-25,33,3,59,27,0,-127,0,0,13,-36,20,-8,9,-12,42,-18,1,34,-4,-3,23,21,-15,49,34,-38,-3,5,20,-50,17,25,-13,-10,33,21,57,20,23, 
  /* [6][0][][] */ -23,-52,-1,5,45,-44,-21,9,28,-23,-10,90,0,0,-127,42,0,-10,46,-18,-3,1,25,-28,36,-4,-5,-21,57,-12,-17,-1,95,-27,30,0,-13,-13,-68,-23,-19,-11,0,-29,-26,-82,-22,-24, 
  /* [7][0][][] */ -111,-29,-15,8,127,18,65,26,18,-1,25,-24,-27,0,84,106,0,9,6,64,-13,-1,-33,42,17,0,42,9,46,56,53,-8,-8,-18,-15,-23,-3,33,17,39,73,3,-22,-15,67,-4,65,78, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.048887412995100021, 0.027378883212804794, 0.060915268957614899, 0.050362829118967056, 0.04756634309887886, 0.049464285373687744, 0.036871746182441711, 0.030755521729588509, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 65380, 54291, 61873, 43462, 366, 13573, 111, 32980, 21659, 35057, 28925, 5347, -45287, -127, 41390, 834, -204, 40055, 687, 2341, -15839, 18705, 46748, 40603, -17373, 25639, 46791, 22556, -2304, 15372, -7386, -51321, 11889, 104737, 26238, 812, 60414, -511, 126087, -27952, 14668, -27817, 1198, 106954, -411, 75110, 1334, -21663, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.2531183327082545e-05, 7.4203555413987488e-05, 0.00015936083218548447, 0.00012793028145097196, 0.00015833691577427089, 0.0001664853043621406, 0.00012497149873524904, 5.7185825426131487e-05, 0.00010283449228154495, 3.2645359169691801e-05, 7.8153745562303811e-05, 3.0363555197254755e-05, 0.00016323392628692091, 0.005541567225009203, 6.2678067479282618e-05, 0.00023792816500645131, 0.0027484172023832798, 1.9612285541370511e-05, 9.2672758910339326e-05, 0.00019354200048837811, 0.00011711305705830455, 0.00016098437481559813, 0.00012838236580137163, 3.5963075788458809e-05, 7.671607454540208e-05, 0.00010905873205047101, 3.6167843063594773e-05, 4.8900856199907139e-05, 0.00035807761014439166, 4.4417487515602261e-05, 4.6495089918607846e-05, 0.00018082190945278853, 0.00019570975564420223, 1.1283697858743835e-05, 9.2050097009632736e-05, 0.00023454894835595042, 1.4677667422802188e-05, 0.00041870557470247149, 3.6900317354593426e-05, 9.3556242063641548e-05, 5.4597665439359844e-05, 0.00022462959168478847, 0.00013274546654429287, 1.1812981028924696e-05, 0.00013409469102043658, 7.9490731877740473e-05, 0.00021169986575841904, 0.0001266114559257403, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-23,-6,-17,7,-39,-79,-70,-25,-49,11,64,35,-71,114,-44,-113,-85,37,-7,-1,-74,-113,-79,-35,-127,-64,-22,71,14,95,26,-127,-91,-7,54,17,49,-127,80,-77,-14,104,-113,-3,-35,-87,105, 75,11,-28,-29,57,-127,-127,-82,60,-77,-115,109,39,-82,-1,63,-52,-112,59,5,10,-107,-127,-69,-4,-126,-120,-42,-54,21,-57,54,29,-127,63,82,11,73,-91,127,-127,7,122,-127,1,-23,-127,91, -32,41,7,-4,-65,-110,-59,-18,88,-9,-127,41,7,-71,-101,-11,-127,-24,27,12,-15,-74,-35,-25,-11,-31,-59,-12,-11,17,-25,9,110,-87,70,32,14,38,-4,16,-80,2,10,-79,-17,5,-56,16, 
  /* [0][1][][] */ -86,-127,-44,-43,-10,55,103,-104,-25,-111,-19,109,90,-64,27,-98,-121,-92,91,-77,43,-89,-106,-127,42,-122,-80,-40,127,-60,127,84,-43,-86,-14,85,-36,-76,-109,90,43,59,106,-112,-93,-116,83,119, 127,-82,-127,-127,127,42,98,-127,101,-127,-112,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-120,-118,127,-96,-127,-127,-119,-127,-71,127,29,-114,127,127,-67,-127,-99,91,62,127,127,-119,-113,-127,125,127, -54,30,-61,-85,-120,-22,33,-38,127,-20,-74,36,55,-70,-26,-44,-37,-31,54,-70,58,-83,-40,-23,48,-7,-47,-58,13,-89,-36,20,31,-97,117,22,-37,-60,0,-14,37,52,11,-77,-58,-36,66,37, 
  /* [0][2][][] */ -60,-106,-34,-37,1,34,-6,-35,-36,-61,-16,57,76,-127,-127,-64,-43,-17,65,75,53,-31,-13,-62,34,-60,-10,-56,76,27,76,62,110,-28,-37,-6,-92,35,-18,31,10,37,18,-63,94,-80,4,29, 88,-73,-89,-88,81,19,6,-46,50,-73,-31,54,82,-26,16,93,-24,-29,78,116,80,-52,-19,-56,95,-68,-20,-98,-49,37,-45,112,-18,-52,68,8,-127,50,-15,0,11,33,17,-70,127,-100,-11,38, -28,29,-42,-39,-80,-19,22,-13,60,-6,-15,32,31,-43,112,-29,-93,-6,30,59,76,-29,-2,-5,44,0,-4,-61,-12,27,-20,40,-90,-44,65,4,-20,23,26,-39,7,35,-4,-16,63,-37,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039325752295553684, 0.0031536510214209557, 0.0067728352732956409, 0.0054370369762182236, 0.0067293187603354454, 0.0070756254717707634, 0.0053112884052097797, 0.0024303975515067577, 0.004370465874671936, 0.0013874276774004102, 0.0033215342555195093, 0.0012904510367661715, 0.0069374418817460537, 0.23551659286022186, 0.0026638179551810026, 0.010111946612596512, 0.1168077290058136, 0.00083352212095633149, 0.0039385920390486717, 0.0082255350425839424, 0.0049773049540817738, 0.0068418355658650398, 0.0054562501609325409, 0.0015284307301044464, 0.0032604329753667116, 0.0046349959447979927, 0.0015371332410722971, 0.0020782863721251488, 0.015218297950923443, 0.0018877431284636259, 0.0019760413561016321, 0.0076849306933581829, 0.0083176642656326294, 0.00047955714398995042, 0.0039121289737522602, 0.0099683301523327827, 0.00062380085000768304, 0.017794987186789513, 0.0015682635130360723, 0.003976140171289444, 0.0023204006720334291, 0.0095467576757073402, 0.0056416820734739304, 0.00050205166917294264, 0.0056990240700542927, 0.0033783561084419489, 0.0089972438290715218, 0.0053809867240488529, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3879, -22, 8460, 6852, 6105, 6320, 9575, -35, -59, -285, 1960, 421, 10742, -75449256, 2613, 16886, -60906556, -112, -414, 12116, 3552, -26, 6, 391, 3270, -683, 101, 654, 4356, 1539, 2409, 14812, 2817, 299, 141, -2373, 388, 2600, -142, 11339, 2121, 11437, -376, -91, 11650, 90, 9974, 3499, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0005375693435780704, 0.00052433193195611238, 0.00037195172626525164, 0.00027962314197793603, 0.00033079696004278958, 0.00033185083884745836, 0.00038707524072378874, 0.0013929473934695125, 0.00050640059635043144, 0.0025645997375249863, 0.00075233803363516927, 0.0020891770254820585, 0.00020307849626988173, 2.149572519982712e-09, 0.0010329247452318668, 0.00019549914577510208, 2.149572519982712e-09, 0.0068844486959278584, 0.00044140501995570958, 0.0003188552800565958, 0.00031058135209605098, 0.0049521760083734989, 0.00037028215592727065, 0.0015532168326899409, 0.0011605041800066829, 0.00076530082151293755, 0.0023235762491822243, 0.0018512177048251033, 0.00027666892856359482, 0.0019337879493832588, 0.0012322977418079972, 0.00015970150707289577, 0.00024685182143002748, 0.01058347150683403, 0.00058568542590364814, 0.00051627063658088446, 0.0038927430287003517, 0.00048626883653923869, 0.0026293972041457891, 0.00030469897319562733, 0.0013440628536045551, 0.00019251649791840464, 0.00047642248682677746, 0.0099645955488085747, 0.00042614628910087049, 0.00056375371059402823, 0.00027992410468868911, 0.00023926541325636208, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,56,-48,23,-23,-53,21, 
  /* [1][0][][] */ 63,78,-24,-95,12,-4,-83,127, 
  /* [2][0][][] */ 33,10,-46,115,45,127,53,79, 
  /* [3][0][][] */ 87,73,-83,127,-106,-15,-14,25, 
  /* [4][0][][] */ -33,-104,69,12,14,12,-30,-127, 
  /* [5][0][][] */ 12,-1,-42,46,7,-33,40,127, 
  /* [6][0][][] */ 64,-14,-127,-57,106,14,50,-18, 
  /* [7][0][][] */ 127,18,18,-26,36,-6,88,-67, 
  /* [8][0][][] */ 6,-74,12,86,6,22,-9,-127, 
  /* [9][0][][] */ 98,-127,11,-16,-10,26,-123,88, 
  /* [10][0][][] */ -127,-30,-104,6,-23,3,-83,41, 
  /* [11][0][][] */ -29,-47,-3,-100,-127,-22,46,-10, 
  /* [12][0][][] */ 18,1,-37,67,-68,-27,57,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -10,-35,-8,9,44,127,51,42, 
  /* [15][0][][] */ 32,9,14,-127,73,39,-54,73, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,24,127,21,-28,-6,27,29, 
  /* [18][0][][] */ 92,-122,26,33,-9,14,-127,6, 
  /* [19][0][][] */ -127,-10,45,104,-55,-75,-95,62, 
  /* [20][0][][] */ 30,33,-37,108,-23,-127,-7,53, 
  /* [21][0][][] */ 54,25,127,4,-14,-11,67,11, 
  /* [22][0][][] */ -75,-15,-127,-2,3,10,-88,3, 
  /* [23][0][][] */ -107,127,-18,-18,14,-7,122,-90, 
  /* [24][0][][] */ 8,-46,-51,94,-13,-55,89,127, 
  /* [25][0][][] */ 20,44,22,28,127,107,-70,-51, 
  /* [26][0][][] */ -82,-37,-127,-2,18,14,-107,-6, 
  /* [27][0][][] */ 2,-35,-21,25,-57,127,75,47, 
  /* [28][0][][] */ 1,-13,-13,36,9,127,49,58, 
  /* [29][0][][] */ 75,22,127,4,-11,-22,73,-15, 
  /* [30][0][][] */ -83,127,-25,-33,9,-4,103,-54, 
  /* [31][0][][] */ -36,-110,-19,10,41,-79,127,123, 
  /* [32][0][][] */ 11,0,-50,103,-34,101,87,127, 
  /* [33][0][][] */ 0,53,-13,-113,1,-19,-6,127, 
  /* [34][0][][] */ -19,83,2,-92,32,-14,8,127, 
  /* [35][0][][] */ 127,19,-12,-61,11,25,122,-60, 
  /* [36][0][][] */ -127,-23,19,79,-56,18,-102,103, 
  /* [37][0][][] */ -9,-24,-8,8,18,127,52,40, 
  /* [38][0][][] */ 10,18,11,95,127,-4,-19,36, 
  /* [39][0][][] */ 7,33,37,-120,23,2,-36,127, 
  /* [40][0][][] */ 92,31,127,3,-12,-13,92,-10, 
  /* [41][0][][] */ 5,-32,-40,81,57,127,76,104, 
  /* [42][0][][] */ -88,-20,127,31,-37,14,-35,64, 
  /* [43][0][][] */ -12,-68,6,108,-25,-3,17,-127, 
  /* [44][0][][] */ 33,-18,-62,-127,75,-38,-2,-104, 
  /* [45][0][][] */ -91,127,1,-38,3,4,75,-57, 
  /* [46][0][][] */ -127,-10,48,16,-39,26,-77,35, 
  /* [47][0][][] */ 98,28,127,3,42,-18,110,-20, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00098457466810941696, 0.00096033001318573952, 0.00068124098470434546, 0.00051213835831731558, 0.00060586474137380719, 0.00060779496561735868, 0.00070894014788791537, 0.0025512257125228643, 0.00092748820316046476, 0.0046971431002020836, 0.0013779301661998034, 0.0038263918831944466, 0.00037194447941146791, 3.937008052901092e-09, 0.0018918333807960153, 0.00035806267987936735, 3.937008052901092e-09, 0.012609078548848629, 0.00080844678450375795, 0.00058399321278557181, 0.00056883925572037697, 0.0090700620785355568, 0.00067818310344591737, 0.0028447641525417566, 0.0021254988387227058, 0.0014016719069331884, 0.0042557008564472198, 0.0033905617892742157, 0.0005067276069894433, 0.0035417918115854263, 0.002256991108879447, 0.00029249821091070771, 0.00045211665565147996, 0.019383952021598816, 0.001072700833901763, 0.00094556546537205577, 0.0071296780370175838, 0.00089061626931652427, 0.004815821535885334, 0.00055806548334658146, 0.0024616923183202744, 0.00035259986179880798, 0.0008725823718123138, 0.018250461667776108, 0.00078049994772300124, 0.0010325321927666664, 0.00051268958486616611, 0.00043822193401865661, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -4104, -42588, -7150, -13071, -30275, 581, -25334, -29240, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0019438185263425112, 0.0020698083098977804, 0.0024312611203640699, 0.0012278768699616194, 0.0011904756538569927, 0.0022943634539842606, 0.0014750409172847867, 0.001010160893201828, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-14,14,6,127,-3,1,-3,-1,-124,-93,-7,0,121,-4,0, 
  /* [1][0][][] */ 0,-29,3,80,73,11,22,7,1,-4,127,-44,0,30,-12,0, 
  /* [2][0][][] */ 0,0,-3,-12,-60,6,12,-2,2,5,-16,1,0,127,-9,0, 
  /* [3][0][][] */ 0,-11,-16,-127,85,23,65,25,-3,58,-2,38,0,-2,14,0, 
  /* [4][0][][] */ 0,54,-32,31,-48,27,127,4,-1,-64,21,-13,0,-8,14,0, 
  /* [5][0][][] */ 0,-17,-11,0,-24,-27,-17,12,-2,7,-3,-44,0,-6,127,0, 
  /* [6][0][][] */ 0,12,-8,-6,51,-10,-24,-1,2,-106,115,62,0,127,64,0, 
  /* [7][0][][] */ 0,15,-12,127,11,3,14,12,-3,70,-54,73,0,-7,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.082612283527851105, 0.087966851890087128, 0.10332860052585602, 0.052184764295816422, 0.050595216453075409, 0.097510449588298798, 0.062689237296581268, 0.042931836098432541, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 31216, 47169, 11485, 11500, 103294, 13556, 86836, -6147, 7224, 29639, 14216, -445, 26430, 11123, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 8.3657629147637635e-05, 8.4370883996598423e-05, 0.00030661097844131291, 0.0001611494371900335, 3.2110830943565816e-05, 0.00036250430275686085, 4.5130160287953913e-05, 2.5931843993021175e-05, 0.00025607369025237858, 0.00019877200247719884, 0.00073005346348509192, 0.00072724185883998871, 0.00024256065080408007, 0.00018670932331588119, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-66,80,-76,-89,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,93,-2,-72,69,-94,75,-95,-27,3,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,17,-28,12,-27,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-8,-25,8,-29,-108,-89,21,-12,-104,-127,1,23, 14,1,66,2,3,35,-25,31,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,71,2,-7,41,-39,50,-75,0,0,5,40,2,-27,23, 23,-4,33,-2,-27,42,-34,19,-124,-13,0,85,-58,0,-29,-111, 21,-7,20,0,4,16,9,21,-114,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.003555449191480875, 0.0035857625771313906, 0.013030966743826866, 0.0068488512188196182, 0.0013647102750837803, 0.015406432561576366, 0.0019180318340659142, 0.0011021033860743046, 0.010883131995797157, 0.0084478100761771202, 0.03102727048099041, 0.030907778069376945, 0.010308827273547649, 0.0079351458698511124, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 17556, -67278, -893, 182563, 44649, 25661, 15301, 246916, 15429, 22355, 823883, -1073741824, 47986, 33551, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00025946696405299008, 0.00031610924634151161, 4.7163564886432141e-05, 1.3447252968035173e-05, 0.00020978094835299999, 0.00014277022273745388, 0.00043916070717386901, 7.9246374298236333e-06, 6.5346306655555964e-05, 0.00013177511573303491, 7.3380870162509382e-06, 1.1533876076441629e-09, 8.0686244473326951e-05, 8.3590384747367352e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 45,-6,30, -6,-28,14, -117,-127,-60, 
  /* [1][1][][] */ 3,-7,0, -16,3,-1, 8,-27,12, 
  /* [1][2][][] */ -3,15,0, -1,9,2, 45,-12,21, 
  /* [2][0][][] */ 18,-10,-16, 55,95,-9, 32,-41,-5, 
  /* [2][1][][] */ 18,23,-3, 81,127,-26, 22,-3,-12, 
  /* [2][2][][] */ 41,-59,14, 61,-42,-26, 27,-53,4, 
  /* [3][0][][] */ 3,33,4, 29,95,22, 1,8,0, 
  /* [3][1][][] */ 25,42,12, 63,127,23, -20,-23,0, 
  /* [3][2][][] */ 4,3,3, 29,30,10, 0,0,7, 
  /* [4][0][][] */ 45,77,-2, 29,98,4, -2,25,14, 
  /* [4][1][][] */ 21,71,40, 22,113,28, 42,67,1, 
  /* [4][2][][] */ 50,75,38, 50,127,26, -8,43,44, 
  /* [5][0][][] */ 0,5,-117, -15,0,-107, -13,27,-26, 
  /* [5][1][][] */ -5,-42,-127, -9,-41,-109, -5,15,-18, 
  /* [5][2][][] */ -15,-2,-27, -6,-8,-16, -5,8,-13, 
  /* [6][0][][] */ 22,-64,33, 44,-88,39, 8,-20,9, 
  /* [6][1][][] */ 35,-95,62, 61,-127,71, 7,-27,18, 
  /* [6][2][][] */ 18,-35,14, 14,-42,29, -14,7,-1, 
  /* [7][0][][] */ -32,23,15, -104,-30,12, -24,29,12, 
  /* [7][1][][] */ -16,0,13, -127,-82,7, -16,-6,11, 
  /* [7][2][][] */ -23,38,4, -18,13,8, -27,26,5, 
  /* [8][0][][] */ -72,-59,12, -56,-43,26, -55,-44,32, 
  /* [8][1][][] */ -78,-66,2, -62,-51,15, -61,-52,22, 
  /* [8][2][][] */ -127,-116,-55, -114,-104,-43, -121,-113,-43, 
  /* [9][0][][] */ -23,-5,10, -15,-5,4, 3,6,-3, 
  /* [9][1][][] */ 83,106,-17, 66,127,14, -1,30,36, 
  /* [9][2][][] */ -34,-31,6, -5,-36,-9, 7,3,-24, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -16,-25,0, 
  /* [10][2][][] */ -32,-19,2, 36,23,-11, -8,0,8, 
  /* [11][0][][] */ -18,-33,-9, 16,-40,9, 7,-111,-60, 
  /* [11][1][][] */ -70,-67,-46, -59,-90,-64, -30,-78,-73, 
  /* [11][2][][] */ -15,-49,-91, 117,127,60, -49,6,-58, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-19, -61,-110,-26, -9,-17,-6, 
  /* [13][1][][] */ 61,114,14, 58,127,24, 8,16,10, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 0,4,-5, 
  /* [14][0][][] */ 41,-10,-43, 75,-28,-53, 28,-12,-23, 
  /* [14][1][][] */ 88,-17,-75, 127,-39,-88, 58,-18,-37, 
  /* [14][2][][] */ 55,-10,-46, 76,-20,-52, 25,-7,-20, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.066164068877696991, 0.080607853829860687, 0.012026708573102951, 0.0034290493931621313, 0.05349414050579071, 0.03640640527009964, 0.11198597401380539, 0.0020207823254168034, 0.016663307324051857, 0.033602651208639145, 0.0018712120363488793, 2.9411381774480105e-07, 0.020574990659952164, 0.021315546706318855, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.54599142074584961, } };
const TfArray<1, int> quant46_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.49533003568649292, } };
const TfArray<1, int> quant50_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.53054291009902954, } };
const TfArray<1, int> quant53_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.68511795997619629, } };
const TfArray<1, int> quant54_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.32200753688812256, } };
const TfArray<1, int> quant58_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.28290992975234985, } };
const TfArray<1, int> quant61_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.32994899153709412, } };
const TfArray<1, int> quant62_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.23062768578529358, } };
const TfArray<1, int> quant65_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.37936756014823914, } };
const TfArray<1, int> quant66_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.052812434732913971, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.072291657328605652, } };
const TfArray<1, int> quant69_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_49_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_49_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_49_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_49_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_49_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
